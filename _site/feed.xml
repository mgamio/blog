<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://codersite.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://codersite.dev/" rel="alternate" type="text/html" /><updated>2022-03-18T11:58:05+01:00</updated><id>https://codersite.dev/feed.xml</id><title type="html">CODER SITE for developers</title><subtitle>Do you like coding? Make what is complex been easy to understand by learning the fundamentals of computer science and software design.</subtitle><author><name>Moises Gamio</name></author><entry><title type="html">UML Diagrams for Java Developers</title><link href="https://codersite.dev/uml-diagrams-for-java-developers/" rel="alternate" type="text/html" title="UML Diagrams for Java Developers" /><published>2022-03-09T00:18:45+01:00</published><updated>2022-03-09T00:18:45+01:00</updated><id>https://codersite.dev/uml-diagrams-for-java-developers</id><content type="html" xml:base="https://codersite.dev/uml-diagrams-for-java-developers/"><![CDATA[<p>The <strong>U</strong>nified <strong>M</strong>odeling <strong>L</strong>anguage is a graphical notation for modeling systems and conveying User software requirements. All developers must understand this notation before starting programming.</p>

<p>UML is not only pretty pictures. Instead, they communicate the software design decisions to programmers.</p>

<h2 id="use-case">Use case</h2>

<p>As entrepreneurs, we usually pay for costly advertisements to promote our products. We can create a little application to make our ads, promote them as printed flyers, and reduce our investments in ads.</p>

<p>Every developer can abstract the main components from a user requirement differently. To have a standard UML notation helps to eliminate ambiguities about the requirements from the beginning. I want to show you how to translate business requirements into technical solutions with this use case.</p>

<h2 id="user-requirement">User requirement</h2>

<p>Given a text message, a URL link, and an image, build a service that automates the composition of flyer design, including the image, text, and the QR code for the link in a PDF file with an A4 format divided into one, two, four or eight parts ready to print.</p>

<p><img src="/assets/images/formFlyer.jpg" alt="formFlyer" title="codersite flyer" class="img-responsive" /></p>

<p>From the user requirement, we can realize that we need a task to create a QR-code, a job to manipulate elements inside an image, and a task to create a PDF file.</p>

<p>We can implement our code or reuse external libraries as dependencies, but the following figure shows the desired result, whatever the implementation approach is chosen.</p>

<p><img src="/assets/images/codersiteFlyers.jpg" alt="codersiteFlyers" title="codersite flyers" class="img-responsive" /></p>

<h2 id="why-do-we-model">Why do we model?</h2>

<ul>
  <li>We build models to understand better the system we are developing.</li>
  <li>Models document the design decisions we have made.</li>
  <li>Models allow an open discussion in the development team before starting programming.</li>
</ul>

<h2 id="design-proposal">Design proposal</h2>

<p>As system analysts, we delegate <strong>responsibilities</strong> to specific software elements called <em>services</em> that execute specific sub-tasks to achieve the user software requirements. Read the <a href="https://codersite.dev/solid-principles-the-definitive-guide/" target="_blank">Single Responsibility Principle</a>.</p>

<p>We need a composer class that accepts the input data from the user. Then, the composer delegates the following subtasks to different services.</p>

<ul>
  <li>Generate a QR Code based on the URL link achieved by the <strong>QR Service</strong>.</li>
  <li>Merge the previous QR Code, text message, and image in a final image design performed by the <strong>Image Service</strong>.</li>
  <li>Build a PDF file that includes the last design image achieved by the <strong>PDF Service</strong>.</li>
</ul>

<p>The composer returns the final image design in a PDF file to the user</p>

<p>The following image shows a System Context diagram to see the big picture, including the actors and services. <a href="https://c4model.com/" target="_blank">C4 model</a> helps software development teams describe and communicate software architecture.</p>

<p><img src="/assets/images/adsContextDiagram.JPG" alt="adsContextDiagram" title="context diagram" class="img-responsive" /></p>

<p>On the client-side, we need the following artifact.</p>

<p><strong>Web application</strong> shows a Formular to the client and forwards its requested data to our backend side.</p>

<p>In addition, we need the following artifacts on the server-side.</p>

<p><strong>Ads Composer Service</strong> receives the user data and delegates the sub-tasks to three additional services</p>

<p><strong>QR service</strong>, responsible for generating a QR code for the URL link</p>

<p><strong>Image Service</strong>, responsible for merging the QR code, text, and image into a new image composition</p>

<p><strong>PDF Service</strong> is responsible for arranging the image composition into a PDF file</p>

<p>The Ads composer service is responsible for orchestrating all calls to these three last services.</p>

<p>It’s better to include a new service called <strong>FlyerComposerService</strong> between Ads Composer Service and the three services. It facilitates the migration task if you want to adopt a microservices architecture.</p>

<h3 id="uml-class-notation">UML Class Notation</h3>

<p>A class is a template for creating objects providing initial values for state (attributes) and behavior (operations). Each attribute has a type. Each operation has a signature.</p>

<p><img src="/assets/images/adsClassUMLNotation.JPG" alt="adsClassUMLNotation" title="UML class diagram" class="img-responsive" /></p>

<p>From the figure above:</p>

<ul>
  <li>The first compartment describes the class name.</li>
  <li>The second compartment describes the attributes with its visibility, private(-) or public(+), and their types.</li>
  <li>The third compartment describes the operations and their return types.</li>
</ul>

<p>The following section shows how these compartments are translated into code.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">FlyerComposerService</span> <span class="p">{</span>

  <span class="kp">private</span> <span class="no">QRService</span> <span class="n">qrService</span><span class="p">;</span>
  <span class="kp">private</span> <span class="no">ImageService</span> <span class="n">imageService</span><span class="p">;</span>
  <span class="kp">private</span> <span class="no">PDFService</span> <span class="n">pdfService</span><span class="p">;</span>
  
  <span class="kp">public</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">composeFlyer</span><span class="p">(</span><span class="no">String</span><span class="p">[]</span> <span class="n">qrText</span><span class="p">,</span>
    <span class="no">String</span> <span class="n">text</span><span class="p">,</span>
    <span class="n">byte</span><span class="p">[]</span> <span class="n">image</span><span class="p">,</span>
    <span class="n">int</span> <span class="n">nroFlyers</span><span class="p">)</span>
    <span class="p">.</span>
    <span class="nf">/</span><span class="o">/</span><span class="n">code</span> <span class="n">omitted</span>
  <span class="p">}</span>

<span class="p">}</span></code></pre></figure>

<h3 id="relationships-between-classes">Relationships between classes</h3>

<p>UML conveys how a class is related to other classes. Let’s see the kind of relationships that matter to our design.</p>

<h4 id="dependency">Dependency</h4>

<p><img src="/assets/images/umlDependency.JPG" alt="umlDependency" title="UML dependency relationship" class="img-responsive" /></p>

<p>Dependency is a relationship used to show that some class requires or depends on another class or interface. In other words, some class provides (supplier) particular functionalities that others require (client).</p>

<p>At the <strong>FlyerComposerService</strong> class above, we can see how is declared the dependencies as member variables.</p>

<h4 id="realization">Realization</h4>

<p><img src="/assets/images/umlRealization.JPG" alt="umlRealization" title="UML realization relationship" class="img-responsive" /></p>

<p>Realization is a relationship where one class realizes or implements the specification defined in another class (usually an interface).</p>

<p>Defining and creating interfaces is an excellent approach to building software to be extendable. Read the <a href="https://codersite.dev/open-closed-principle/" target="_blank">Open-Closed Principle</a>.</p>

<h3 id="the-implemented-code-reflects-the-intent-of-the-uml-designer">The implemented code reflects the intent of the UML designer.</h3>

<p>The following figure conveys the Class diagram.</p>

<p><img src="/assets/images/adsClassDiagram.JPG" alt="adsClassDiagram" title="class diagram" class="img-responsive" /></p>

<p>For example, we can see how the QRService interface is implemented into code.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">interface</span> <span class="no">QRService</span> <span class="p">{</span>
  <span class="n">byte</span><span class="p">[]</span> <span class="n">generateQRCode</span><span class="p">(</span><span class="no">String</span> <span class="n">qrText</span><span class="p">)</span> <span class="n">throws</span> <span class="no">Exception</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>In addition, we can see how the QRServiceImpl class is implemented into code</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">QRServiceImpl</span> <span class="n">implements</span> <span class="no">QRService</span> <span class="p">{</span>
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="n">byte</span><span class="p">[]</span> <span class="n">generateQRCode</span><span class="p">(</span><span class="no">String</span> <span class="n">qrText</span><span class="p">)</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
  <span class="p">.</span>
  <span class="nf">/</span><span class="o">/</span><span class="n">code</span> <span class="n">omitted</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="conclusions">Conclusions</h3>

<ul>
  <li>UML convey how to build the software without ambiguities, e.g., build first an interface instead of a class.</li>
  <li>Modeling through UML yields an understanding of a system.</li>
  <li>An explicit UML class diagram facilitates communication between developers.</li>
</ul>

<p>We will see how to implement every Spring Boot service in the following articles, so follow me!</p>]]></content><author><name>Moises Gamio</name></author><category term="solid" /><category term="design" /><summary type="html"><![CDATA[Design essensial UML diagram before starting programming]]></summary></entry><entry><title type="html">SOLID principles: The Open-Closed Principle (Part II)</title><link href="https://codersite.dev/open-closed-principle/" rel="alternate" type="text/html" title="SOLID principles: The Open-Closed Principle (Part II)" /><published>2022-01-06T00:18:45+01:00</published><updated>2022-01-06T00:18:45+01:00</updated><id>https://codersite.dev/open-closed-principle</id><content type="html" xml:base="https://codersite.dev/open-closed-principle/"><![CDATA[<p>SOLID principles tell you how to arrange your functions into classes and how those classes should be interrelated.</p>

<p>When SOLID principles are applied correctly, your software infrastructure will be able to tolerate changes, it will be easier to understand, and it will be focuser on reusable components.</p>

<p>After looking at the <a href="https://codersite.dev/solid-principles-the-definitive-guide/" target="_blank">Single Responsibility Principle</a>, let’s continue with the second principle.</p>

<p><img src="/assets/images/openClosedPrinciple.jpg" alt="openClosedPrinciple" class="img-responsive" /></p>

<h2 id="solid-principles-the-open-closed-principle-ocp">SOLID principles: The Open-Closed Principle (OCP)</h2>

<blockquote>
  <p>… “a module, class, or function should be open for extension but closed for modification.“</p>
</blockquote>

<p><a href="https://amzn.to/3eSkKXx" target="_blank">Bertrand Meyer</a> coined the principle, suggesting that we should build software to be extendable without touching its current code implementation.</p>

<p>For instance, imagine designing and implementing a rate limit algorithm to control the number of requests allowed for every endpoint in a <a href="https://codersite.dev/documenting-rest-api-openapi3/" target="_blank">REST API</a>.</p>

<p>The RateLimit class implements an interceptor - <em>HandlerInterceptor</em> - that allows an application to intercept HTTP requests before they reach the service, so we can either let the request go through or block it and send back the status code 429.</p>

<p>The team wants to retrieve the number of requests by plan from a text file. The following <em>getAPIPlans</em> method retrieves those parameters.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">RateLimit</span> <span class="n">implements</span> <span class="no">HandlerInterceptor</span> <span class="p">{</span>
  <span class="kp">private</span> <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">apiPlans</span><span class="p">;</span>
  
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="n">boolean</span> <span class="n">preHandle</span><span class="p">(</span><span class="no">HttpServletRequest</span> <span class="n">request</span><span class="p">,</span> 
    <span class="no">HttpServletResponse</span> <span class="n">response</span><span class="p">,</span> <span class="no">Object</span> <span class="n">handler</span><span class="p">)</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
    <span class="sr">//</span><span class="n">getClientId</span>
    <span class="n">apiPlans</span> <span class="o">=</span> <span class="n">getAPIPlans</span><span class="p">();</span>
    <span class="sr">//</span><span class="n">build</span> <span class="no">Buckets</span>
    <span class="sr">//e</span><span class="n">valuate</span> <span class="n">request</span> <span class="n">per</span> <span class="n">clientId</span>
    <span class="sr">//</span><span class="n">accept</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="n">or</span> <span class="n">refuse</span><span class="p">(</span><span class="mi">429</span><span class="p">)</span> <span class="n">request</span>
  <span class="p">}</span>
  
  <span class="kp">private</span> <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">getAPIPlans</span><span class="p">()</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
    <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">apiPlans</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ConcurrentHashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span>
    <span class="no">Resource</span> <span class="n">resource</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ClassPathResource</span><span class="p">(</span><span class="s2">"apiPlans.txt"</span><span class="p">);</span>
    <span class="n">try</span> <span class="p">{</span>
      <span class="no">List</span><span class="o">&lt;</span><span class="no">String</span><span class="o">&gt;</span> <span class="n">allLines</span> <span class="o">=</span> <span class="no">Files</span><span class="p">.</span><span class="nf">readAllLines</span><span class="p">(</span><span class="no">Paths</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">resource</span><span class="p">.</span><span class="nf">getURI</span><span class="p">()));</span>
      <span class="k">for</span> <span class="p">(</span><span class="no">String</span> <span class="ss">line: </span><span class="n">allLines</span><span class="p">)</span> <span class="p">{</span>
	    <span class="no">String</span><span class="p">[]</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="s2">":"</span><span class="p">);</span>
  	    <span class="no">String</span> <span class="n">plan</span> <span class="o">=</span> <span class="n">attributes</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
	    <span class="n">long</span> <span class="n">capacity</span> <span class="o">=</span> <span class="no">Long</span><span class="p">.</span><span class="nf">valueOf</span><span class="p">(</span><span class="n">attributes</span><span class="p">[</span><span class="mi">1</span><span class="p">]).</span><span class="nf">longValue</span><span class="p">();</span>
	    <span class="n">apiPlans</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">plan</span><span class="p">,</span> <span class="n">capacity</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="kp">catch</span> <span class="p">(</span><span class="no">IOException</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="nf">getMessage</span><span class="p">());</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">apiPlans</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="suddenly-an-unexpected-scenario-arises">Suddenly an unexpected scenario arises.</h2>

<p>The developer leaves the company, and a new one arrives—for example, You.</p>

<p>As developers, we usually receive tasks to do maintenance in projects that do not belong to us; specifically, we never created that code.</p>

<p>Then weeks later, your team decides that must be retrieved parameters from a database. Therefore you proceed to replace the <em>getAPIPlans</em> method; then, <em>you break the open-closed principle</em>.</p>

<p>That is the meaning of the principle; you can not touch the code that is already implemented and working for a long time. Suppose the code is too complex to understand, not well documented, and includes a lot of dependencies. In that case, we have a lot of probabilities to introduce a bug or break some functionalities that we cannot visualize. Unless it is a bug that we have to fix, we should never modify the existing code.</p>

<p>Even if the code is not well designed or does not follow well object-oriented principles, it could not be easy to extend a class to introduce new functionalities.</p>

<p>The team implements the open-closed principle to support future changes for this scenario. To refactor the code, we adopt polymorphism and aggregation.</p>

<h3 id="polymorphism">Polymorphism</h3>

<p>Polymorphism is part of the core concepts of Object-Oriented Programming and means many forms, allowing an object to behave differently in some instances. For our scenario, polymorphism will enable the <em>getAPIPlans</em> method to achieve its goals in different ways: retrieve the parameters from a text file or a database.</p>

<h3 id="aggregation">Aggregation</h3>

<p>Aggregation defines a HAS-A relationship between two classes. Their objects have their life cycle, but one of them is the owner of the HAS-A relationship.</p>

<p>The following diagram shows the goal of our design.</p>

<p><img src="/assets/images/rateLimit.jpg" alt="rateLimit" class="img-responsive" /></p>

<h2 id="enabling-the-open-closed-principle">Enabling the Open-Closed Principle</h2>

<p>Firstly,  and thinking abstractly, you should create an interface and define a contract that will include all required functionalities.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">interface</span> <span class="no">DataService</span> <span class="p">{</span>

  <span class="kp">public</span> <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">getAPIPlans</span><span class="p">()</span> <span class="n">throws</span> <span class="no">Exception</span><span class="p">;</span>

<span class="p">}</span></code></pre></figure>

<p>Secondly, we move our <em>getAPIPlans</em> method to a new class that implements the previous interface.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">TextData</span> <span class="n">implements</span> <span class="no">DataService</span> <span class="p">{</span>
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">getAPIPlans</span><span class="p">()</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
    <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">apiPlans</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ConcurrentHashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span>
	<span class="sr">//</span><span class="n">code</span> <span class="n">omitted</span>
	
    <span class="k">return</span> <span class="n">apiPlans</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Thanks to abstractions, we can create a new class to implement <em>getAPIPlans</em> with different behavior, in this case, to retrieve parameters from a database.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">DBData</span> <span class="n">implements</span> <span class="no">DataService</span> <span class="p">{</span>
  <span class="kp">private</span> <span class="no">DataSource</span> <span class="n">datasource</span><span class="p">;</span>
  
  <span class="kp">public</span> <span class="no">DBData</span><span class="p">(</span><span class="no">DataSource</span> <span class="n">datasource</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">datasource</span> <span class="o">=</span> <span class="n">datasource</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">getAPIPlans</span><span class="p">()</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
    <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">apiPlans</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ConcurrentHashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span>
    <span class="k">for</span> <span class="p">(</span><span class="no">Plan</span> <span class="n">plan</span> <span class="p">:</span> <span class="n">datasource</span><span class="p">.</span><span class="nf">getAPIPlans</span><span class="p">())</span> <span class="p">{</span>
      <span class="sr">//</span><span class="n">code</span> <span class="n">omitted</span>
	 
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">apiPlans</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Introducing a new abstraction layer with different implementations avoids tight coupling between classes.</p>

<p>Finally, we refactor our RateLimit class <em>aggregating</em> an instance of DataService type in its constructor method.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">RateLimit</span> <span class="n">implements</span> <span class="no">HandlerInterceptor</span> <span class="p">{</span>
  <span class="kp">private</span> <span class="no">Map</span><span class="o">&lt;</span><span class="no">String</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="n">apiPlans</span><span class="p">;</span>
  <span class="kp">private</span> <span class="no">DataService</span> <span class="n">dataService</span><span class="p">;</span>
  
  <span class="kp">public</span> <span class="no">RateLimit</span><span class="p">(</span><span class="no">DataService</span> <span class="n">dataService</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">dataService</span> <span class="o">=</span> <span class="n">dataService</span><span class="p">;</span>
  <span class="p">}</span>
  
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="n">boolean</span> <span class="n">preHandle</span><span class="p">(</span><span class="no">HttpServletRequest</span> <span class="n">request</span><span class="p">,</span> 
    <span class="no">HttpServletResponse</span> <span class="n">response</span><span class="p">,</span> <span class="no">Object</span> <span class="n">handler</span><span class="p">)</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
    <span class="sr">//</span><span class="n">getClientId</span>
    <span class="n">apiPlans</span> <span class="o">=</span> <span class="n">dataService</span><span class="p">.</span><span class="nf">getAPIPlans</span><span class="p">();</span>
    <span class="sr">//</span><span class="n">build</span> <span class="no">Buckets</span>
    <span class="sr">//e</span><span class="n">valuate</span> <span class="n">request</span> <span class="n">per</span> <span class="n">clientId</span>
    <span class="sr">//</span><span class="n">accept</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="n">or</span> <span class="n">refuse</span><span class="p">(</span><span class="mi">429</span><span class="p">)</span> <span class="n">request</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>If later we decided to retrieve the parameters from a <a href="https://codersite.dev/hot-warm-architecture-elasticsearch/" target="_blank">NoSQL database</a>, we would no longer have to touch the code, create a new class that implements <em>getAPIPlans</em>, and instantiate this new class in RateLimit.</p>

<p>Even if, instead of implementing the <em>HandlerInterceptor</em> interface, we implement a <em>Filter</em> to design our Rate Limit algorithm, we can reuse the DataService interface as one of its dependencies.</p>

<p>Calling to <em>getAPIPlans</em> is now fixed (closed for modification). If we want it to behave differently, we implement it in a new class (open for extension) that will follow the contracts defined in our interface.</p>

<p>Our new DBData dependency is instantiated in our RateLimit class thanks to the magic of the Dependency Injection principle, which I will explain in a near-future article, so follow me!.</p>]]></content><author><name>Moises Gamio</name></author><category term="solid" /><summary type="html"><![CDATA[SOLID principles tell us how to arrange our functions into classes. When it is well applied, our software infrastructure will be easier to understand]]></summary></entry><entry><title type="html">Shopping options</title><link href="https://codersite.dev/shopping-options/" rel="alternate" type="text/html" title="Shopping options" /><published>2021-12-28T18:18:00+01:00</published><updated>2021-12-28T18:18:00+01:00</updated><id>https://codersite.dev/shopping-options</id><content type="html" xml:base="https://codersite.dev/shopping-options/"><![CDATA[<p>An Amazon customer wants to buy a pair of jeans, a pair of shoes, a skirt, and a top but has a limited budget in dollars. Given different pricing options for each product, determine how many options our customer has to buy 1 of each product. You cannot spend more money than the budgeted amount.</p>

<p><img src="/assets/images/shoppingOptions.jpg" alt="merge-two-sorted-lists" class="img-responsive" /></p>

<p>Example</p>

<p>priceOfJeans = [2,3]</p>

<p>priceOfShoes = [4]</p>

<p>priceOfSkirts = [2,3]</p>

<p>priceOfTops = [1,2]</p>

<p>budgeted = 10</p>

<p>The customer must buy shoes for 4 dollars since there is only one option. This leaves 6 dollars to spend on the other 3 items. Combinations of prices paid for jeans, skirts, and tops respectively that add up to 6 dollars or less are [2,2,2], [2,2,1], [3,2,1], [2,3,1]. There are 4 ways the customer can purchase all 4 items.</p>

<h2 id="function-description">Function description</h2>

<p>Create a function that returns an integer representing the number of options present to buy the four items.</p>

<p>The function must have 5 parameters:</p>

<p>int[] priceOfJeans: An integer array containing the prices of the pairs of jeans available.</p>

<p>int[] priceOfShoes: An integer array containing the prices of the pairs of shoes available.</p>

<p>int[] priceOfSkirts: An integer array containing the prices of the skirts available.</p>

<p>int[] priceOfTops: An integer array containing the prices of the tops available.</p>

<p>int dollars: the total number of dollars available to shop with.</p>

<p>Constraints</p>

<p>1 ≤ length(priceOfJeans, priceOfShoes, priceOfSkirts, priceOfTops) ≤ 1000</p>

<p>1 ≤ dollars, prices ≤ 1000000000</p>

<h2 id="solution">Solution</h2>

<p>To find how many ways the customer can purchase all four items, we can iterate the four arrays, combine all its products, and validate that he/she cannot spend more money than the budgeted amount.</p>

<p>Here is our assumption based on a Test case.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@Test</span>
<span class="kp">public</span> <span class="n">void</span> <span class="n">test_shoppingOptions</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfJeans</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
  <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfShoes</span> <span class="o">=</span> <span class="p">{</span><span class="mi">4</span><span class="p">};</span>
  <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfSkirts</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">};</span>
  <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfTops</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">};</span>
  <span class="n">assertEquals</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="no">ShoppingOptions</span><span class="p">.</span><span class="nf">getNumberOfOptions</span><span class="p">(</span><span class="n">priceOfJeans</span><span class="p">,</span> <span class="n">priceOfShoes</span><span class="p">,</span>
          <span class="n">priceOfSkirts</span><span class="p">,</span> <span class="n">priceOfTops</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>We proceed to implement the algorithm that includes all possible input validations. The for-each construct helps our code be elegant and readable and there is no use of the index. See <a href="https://medium.com/@mkgv89/clean-code-fe3a1deee528?sk=dd8329f6fddf7e4738e4d13c4c05aad2" target="_blank">clean code</a> practices.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">ShoppingOptions</span> <span class="p">{</span>
  <span class="kp">public</span> <span class="n">static</span> <span class="n">int</span> <span class="n">getNumberOfOptions</span><span class="p">(</span><span class="n">int</span><span class="p">[]</span> <span class="n">priceOfJeans</span><span class="p">,</span>
    <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfShoes</span><span class="p">,</span> <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfSkirts</span><span class="p">,</span> <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfTops</span><span class="p">,</span> <span class="n">int</span> <span class="n">dollars</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">dollars</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">dollars</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value for budget"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJeans</span><span class="p">.</span><span class="nf">length</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfJeans</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong size in array: priceOfJeans"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">priceOfShoes</span><span class="p">.</span><span class="nf">length</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfShoes</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong size in array: priceOfShoes"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">priceOfSkirts</span><span class="p">.</span><span class="nf">length</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfSkirts</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong size in array: priceOfSkirts"</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">priceOfTops</span><span class="p">.</span><span class="nf">length</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfTops</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong size in array: priceOfJeans"</span><span class="p">);</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfJean</span> <span class="p">:</span> <span class="n">priceOfJeans</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJean</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfJean</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
        <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value in array: priceOfJeans"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfShoe</span> <span class="p">:</span> <span class="n">priceOfShoes</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">priceOfShoe</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfShoe</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
        <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value in array: priceOfShoes"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfSkirt</span> <span class="p">:</span> <span class="n">priceOfSkirts</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">priceOfSkirt</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfSkirt</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
        <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value in array: priceOfSkirts"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfTop</span> <span class="p">:</span> <span class="n">priceOfTops</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">priceOfTop</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">priceOfTop</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
        <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value in array: priceOfTops"</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="n">int</span> <span class="n">numberOfOptions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfJean</span> <span class="p">:</span> <span class="n">priceOfJeans</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfShoe</span> <span class="p">:</span> <span class="n">priceOfShoes</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfSkirt</span> <span class="p">:</span> <span class="n">priceOfSkirts</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfTop</span> <span class="p">:</span> <span class="n">priceOfTops</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJean</span> <span class="o">+</span> <span class="n">priceOfShoe</span> <span class="o">+</span> <span class="n">priceOfSkirt</span> <span class="o">+</span> <span class="n">priceOfTop</span> <span class="o">&lt;=</span> <span class="n">dollars</span><span class="p">)</span>
              <span class="n">numberOfOptions</span> <span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">numberOfOptions</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>A function or method should be small, making it easier to read and understand. Therefore, we refactor our code, moving all validations to a private method. The following code shows a new implementation of our algorithm.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">ShoppingOptions</span> <span class="p">{</span>
  <span class="kp">public</span> <span class="n">static</span> <span class="n">int</span> <span class="n">getNumberOfOptions</span><span class="p">(</span><span class="n">int</span><span class="p">[]</span> <span class="n">priceOfJeans</span><span class="p">,</span>
    <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfShoes</span><span class="p">,</span> <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfSkirts</span><span class="p">,</span> <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfTops</span><span class="p">,</span> <span class="n">int</span> <span class="n">dollars</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">dollars</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">dollars</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value for budget"</span><span class="p">);</span>

    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfJeans</span><span class="p">,</span> <span class="s2">"jeans"</span><span class="p">);</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfShoes</span><span class="p">,</span> <span class="s2">"shoes"</span><span class="p">);</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfSkirts</span><span class="p">,</span> <span class="s2">"skirts"</span><span class="p">);</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfTops</span><span class="p">,</span> <span class="s2">"tops"</span><span class="p">);</span>
    <span class="n">int</span> <span class="n">numberOfOptions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfJean</span> <span class="p">:</span> <span class="n">priceOfJeans</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfShoe</span> <span class="p">:</span> <span class="n">priceOfShoes</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfSkirt</span> <span class="p">:</span> <span class="n">priceOfSkirts</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfTop</span> <span class="p">:</span> <span class="n">priceOfTops</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJean</span> <span class="o">+</span> <span class="n">priceOfShoe</span> <span class="o">+</span> <span class="n">priceOfSkirt</span> <span class="o">+</span> <span class="n">priceOfTop</span> <span class="o">&lt;=</span> <span class="n">dollars</span><span class="p">)</span>
              <span class="n">numberOfOptions</span> <span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">numberOfOptions</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kp">private</span> <span class="n">static</span> <span class="n">void</span> <span class="n">validate</span><span class="p">(</span><span class="n">int</span><span class="p">[]</span> <span class="n">array</span><span class="p">,</span> <span class="no">String</span> <span class="n">arrayName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="nf">length</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">array</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong size in array "</span> <span class="o">+</span> <span class="n">arrayName</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">price</span> <span class="p">:</span> <span class="n">array</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">price</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
        <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value in array "</span> <span class="o">+</span>  <span class="n">arrayName</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This algorithm works fine when array size and values are small. But based on the constraints, imagine you are processing a priceOfShoe value of 100000 at the location priceOfShoes[101], and at that moment, the sum of priceOfJean + priceOfShoe is greater than 10 dollars. Therefore, it does not sense to continue processing the following possible 1000000000 items of pricesOfSkits[] and other 1000000000 items of priceOfTops[].</p>

<p>We need to skip this particular iteration and use “continue” to order process the next priceOfShoe at the location priceOfShoes[102], for example.</p>

<p>We create a new test case with big prices. You can add more items to the arrays.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@Test</span>
  <span class="kp">public</span> <span class="n">void</span> <span class="n">test_shoppingOptionsBigPrices</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfJeans</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span>
            <span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">,</span><span class="mi">10000</span><span class="p">};</span>
    <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfShoes</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2000002</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2000002</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span>
            <span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">,</span><span class="mi">200000</span><span class="p">,</span><span class="mi">400000</span><span class="p">};</span>
    <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfSkirts</span> <span class="o">=</span> <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span>
            <span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">6000000</span><span class="p">};</span>
    <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfTops</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span>
            <span class="mi">3000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">,</span><span class="mi">3000000</span><span class="p">,</span><span class="mi">7000000</span><span class="p">};</span>
    <span class="n">assertEquals</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="no">ShoppingOptions</span><span class="p">.</span><span class="nf">getNumberOfOptions</span><span class="p">(</span><span class="n">priceOfJeans</span><span class="p">,</span> <span class="n">priceOfShoes</span><span class="p">,</span>
            <span class="n">priceOfSkirts</span><span class="p">,</span> <span class="n">priceOfTops</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
  <span class="p">}</span></code></pre></figure>

<p>We run the test against the previous implementation, and the second test takes 32 ms on average. The execution time could increase if we complete the max size of our arrays.</p>

<p><img src="/assets/images/shoppingOptionsTest1.JPG" alt="merge-two-sorted-lists" class="img-responsive" /></p>

<p>The following listing shows an optimized solution.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">ShoppingOptions</span> <span class="p">{</span>
  <span class="kp">public</span> <span class="n">static</span> <span class="n">int</span> <span class="n">getNumberOfOptions</span><span class="p">(</span><span class="n">int</span><span class="p">[]</span> <span class="n">priceOfJeans</span><span class="p">,</span>
    <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfShoes</span><span class="p">,</span> <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfSkirts</span><span class="p">,</span> <span class="n">int</span><span class="p">[]</span> <span class="n">priceOfTops</span><span class="p">,</span> <span class="n">int</span> <span class="n">dollars</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">dollars</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">dollars</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value for budget"</span><span class="p">);</span>

    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfJeans</span><span class="p">,</span> <span class="s2">"jeans"</span><span class="p">);</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfShoes</span><span class="p">,</span> <span class="s2">"shoes"</span><span class="p">);</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfSkirts</span><span class="p">,</span> <span class="s2">"skirts"</span><span class="p">);</span>
    <span class="n">validate</span><span class="p">(</span><span class="n">priceOfTops</span><span class="p">,</span> <span class="s2">"tops"</span><span class="p">);</span>
    <span class="n">int</span> <span class="n">numberOfOptions</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfJean</span> <span class="p">:</span> <span class="n">priceOfJeans</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJean</span> <span class="o">&gt;=</span> <span class="n">dollars</span><span class="p">)</span>
        <span class="n">continue</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfShoe</span> <span class="p">:</span> <span class="n">priceOfShoes</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJean</span> <span class="o">+</span> <span class="n">priceOfShoe</span> <span class="o">&gt;=</span> <span class="n">dollars</span><span class="p">)</span>
          <span class="n">continue</span><span class="p">;</span>
        <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfSkirt</span> <span class="p">:</span> <span class="n">priceOfSkirts</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJean</span> <span class="o">+</span> <span class="n">priceOfShoe</span> <span class="o">+</span> <span class="n">priceOfSkirt</span> <span class="o">&gt;=</span> <span class="n">dollars</span><span class="p">)</span>
            <span class="n">continue</span><span class="p">;</span>
          <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">priceOfTop</span> <span class="p">:</span> <span class="n">priceOfTops</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">priceOfJean</span> <span class="o">+</span> <span class="n">priceOfShoe</span> <span class="o">+</span> <span class="n">priceOfSkirt</span> <span class="o">+</span> <span class="n">priceOfTop</span> <span class="o">&lt;=</span> <span class="n">dollars</span><span class="p">)</span>
              <span class="n">numberOfOptions</span> <span class="o">+=</span><span class="mi">1</span><span class="p">;</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">numberOfOptions</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="kp">private</span> <span class="n">static</span> <span class="n">void</span> <span class="n">validate</span><span class="p">(</span><span class="n">int</span><span class="p">[]</span> <span class="n">array</span><span class="p">,</span> <span class="no">String</span> <span class="n">arrayName</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">array</span><span class="p">.</span><span class="nf">length</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">array</span><span class="p">.</span><span class="nf">length</span> <span class="o">&gt;</span> <span class="mi">1000</span><span class="p">)</span>
      <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong size in array "</span> <span class="o">+</span> <span class="n">arrayName</span><span class="p">);</span>

    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">price</span> <span class="p">:</span> <span class="n">array</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">price</span> <span class="o">&lt;</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">price</span> <span class="o">&gt;</span> <span class="mi">1000000000</span><span class="p">)</span>
        <span class="kp">throw</span> <span class="n">new</span> <span class="no">RuntimeException</span><span class="p">(</span><span class="s2">"wrong value in array "</span> <span class="o">+</span>  <span class="n">arrayName</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We can see the new execution time.</p>

<p><img src="/assets/images/shoppingOptionsTest2.JPG" alt="merge-two-sorted-lists" class="img-responsive" /></p>

<p>Well, what happens when our possible right prices are located at the end of the arrays?. One possible solution could be to sort the arrays before iterating and find the right combinations of prices.</p>

<p>Understanding the inner workings of common <a href="https://codersite.dev/book/" target="_blank">data structures</a> and <a href="https://codersite.gumroad.com/l/jqgde/uyn1iyx" target="_blank">algorithms</a> is a must for Java developers. <a href="https://payhip.com/b/B9u6L" target="_blank">Learn more</a></p>]]></content><author><name>Moises Gamio</name></author><category term="algorithms" /><category term="java" /><category term="interview" /><summary type="html"><![CDATA[Shopping options under a budgeted amount]]></summary></entry><entry><title type="html">Merge two Sorted Lists</title><link href="https://codersite.dev/merge-two-sorted-lists/" rel="alternate" type="text/html" title="Merge two Sorted Lists" /><published>2021-08-03T23:18:45+02:00</published><updated>2021-08-03T23:18:45+02:00</updated><id>https://codersite.dev/merge-two-sorted-lists</id><content type="html" xml:base="https://codersite.dev/merge-two-sorted-lists/"><![CDATA[<p>Given two sorted lists, merge them in a new sorted list.</p>

<p><img src="/assets/images/mergeSortedLists.jpg" alt="merge-two-sorted-lists" class="img-responsive" /></p>

<p>We can join the two lists into a new list and apply a sort algorithm such as bubble sort, insertion, or quicksort. What we are going to do is to implement a new algorithm with a <a href="/big-o-notation-analysis-of-algorithms/" target="_blank">NlogN</a> performance.</p>

<ul>
  <li>We define a new List to add all elements from the other two lists in a sorted way.</li>
  <li>We define two indexes that point to every element in every list</li>
  <li>We iterate both lists while still exist elements in both lists</li>
  <li>We compare elements from both lists and add the smaller one to the new list in every iteration. Before passing to the next iteration, we increment in one the index of the list, which contains the smaller element.</li>
  <li>If there is a list that still contains elements, we add them directly to the new list.</li>
</ul>

<h2 id="a-test-case-helps-to-validate-your-assumptions">A test case helps to validate your assumptions</h2>

<p>Our assumption based on a test case:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@Test</span>
<span class="kp">public</span> <span class="n">void</span> <span class="n">mergeSortedLists</span><span class="p">()</span> <span class="p">{</span>
  <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">sList1</span> <span class="o">=</span> <span class="no">Arrays</span><span class="p">.</span><span class="nf">asList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span>
  <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">sList2</span> <span class="o">=</span> <span class="no">Arrays</span><span class="p">.</span><span class="nf">asList</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
  <span class="n">assertEquals</span><span class="p">(</span><span class="s2">"[1, 1, 2, 3, 4, 5, 6, 8]"</span><span class="p">,</span>    
    <span class="no">SortedList</span><span class="p">.</span><span class="nf">merge_sorted</span><span class="p">(</span><span class="n">sList1</span><span class="p">,</span><span class="n">sList2</span><span class="p">).</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">}</span>

<span class="vi">@Test</span>
<span class="kp">public</span> <span class="n">void</span> <span class="n">mergeSortedLists2</span><span class="p">()</span> <span class="p">{</span>
  <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">sList1</span> <span class="o">=</span> <span class="no">Arrays</span><span class="p">.</span><span class="nf">asList</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
  <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">sList2</span> <span class="o">=</span> <span class="no">Arrays</span><span class="p">.</span><span class="nf">asList</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
  <span class="n">assertEquals</span><span class="p">(</span><span class="s2">"[1, 2, 3, 4, 5, 6]"</span><span class="p">,</span> 
    <span class="no">SortedList</span><span class="p">.</span><span class="nf">merge_sorted</span><span class="p">(</span><span class="n">sList1</span><span class="p">,</span><span class="n">sList2</span><span class="p">).</span><span class="nf">toString</span><span class="p">());</span>
<span class="p">}</span></code></pre></figure>

<p>Here, the implementation code:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">SortedList</span> <span class="p">{</span>
  <span class="kp">public</span> <span class="n">static</span> <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">merge_sorted</span><span class="p">(</span>
    <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">sList1</span><span class="p">,</span> <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">sList2</span><span class="p">)</span> <span class="p">{</span>

    <span class="no">List</span><span class="o">&lt;</span><span class="no">Integer</span><span class="o">&gt;</span> <span class="n">mergedSortedList</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ArrayList</span><span class="o">&lt;&gt;</span><span class="p">();</span>
    <span class="n">int</span> <span class="n">idx1</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">int</span> <span class="n">idx2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

    <span class="k">while</span> <span class="p">(</span><span class="n">idx1</span> <span class="o">&lt;</span> <span class="n">sList1</span><span class="p">.</span><span class="nf">size</span><span class="p">()</span> <span class="o">&amp;&amp;</span> <span class="n">idx2</span> <span class="o">&lt;</span> <span class="n">sList2</span><span class="p">.</span><span class="nf">size</span><span class="p">())</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">sList1</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">idx1</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">sList2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">idx2</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">mergedSortedList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">sList1</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">idx1</span><span class="p">));</span>
        <span class="n">idx1</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">mergedSortedList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">sList2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">idx2</span><span class="p">));</span>
        <span class="n">idx2</span><span class="o">++</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="n">mergedSortedList</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The previous algorithm is missing how to proceed when one of the lists still contains elements not compared. Keep reading <a href="https://amzn.to/3wdwVry" target="_blank">here</a></p>]]></content><author><name>Moises Gamio</name></author><category term="algorithms" /><category term="java" /><summary type="html"><![CDATA[Given two sorted lists, merge them in a new sorted list - coding interview]]></summary></entry><entry><title type="html">Hot-Warm Architecture in Elasticsearch 1/n</title><link href="https://codersite.dev/hot-warm-architecture-elasticsearch/" rel="alternate" type="text/html" title="Hot-Warm Architecture in Elasticsearch 1/n" /><published>2021-02-26T10:01:45+01:00</published><updated>2021-02-26T10:01:45+01:00</updated><id>https://codersite.dev/hot-warm-architecture-elasticsearch</id><content type="html" xml:base="https://codersite.dev/hot-warm-architecture-elasticsearch/"><![CDATA[<p>Elasticsearch is a distributed real-time document store where every field is indexed and searchable.</p>

<p>Hot-warm architecture is a way to separate an Elasticsearch deployment into “hot” data nodes and “warm” data nodes.</p>

<p>In Hot nodes, You are actively querying and writing to your index.</p>

<p>In Warm nodes, You are still querying your index, but it is read-only.</p>

<p>In Cold nodes, You are querying your index less frequently. You can deploy it to less performant hardware.</p>

<h2 id="problem">Problem</h2>

<p>When we need to identify bottlenecks, errors, heavy traffic issues, slow-running queries, and more, we usually analyze our web server <em>logs</em>.
But this task is tedious because the <em>logs</em> are distributed in a cluster that contains several web servers machines.</p>

<h2 id="solution">Solution</h2>

<p>We are going to install a Hot-Cold Logging Cluster on the Elasticsearch Service as shown in the following figure.</p>

<p><img src="/assets/images/hot-warm-elastic.jpg" alt="hot-warm-architecture" class="img-responsive" /></p>

<h2 id="installation">Installation</h2>

<p>We have the following IP addresses (Three Windows Servers):</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">master</span>   <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span>
<span class="n">hotnode</span>  <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.102</span>
<span class="n">coldnode</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.103</span></code></pre></figure>

<p>Open Windows Defender Firewall and add the following rule for the three machines:</p>

<p><img src="/assets/images/firewall.jpg" alt="firewall" class="img-responsive" /></p>

<p>For the <em>hotnode</em> add an extra 5044 port to the rule if you want to install <em>logstash</em> in that machine.</p>

<h2 id="configure-elasticsearch-cluster-settings-at-master-node">Configure Elasticsearch cluster settings at Master Node</h2>

<p>Open …/elasticsearch.yml and copy the following content.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">bootstrap</span><span class="p">.</span><span class="nf">memory_lock</span><span class="p">:</span> <span class="kp">true</span>
<span class="n">cluster</span><span class="p">.</span><span class="nf">initial_master_nodes</span><span class="p">:</span>
  <span class="o">-</span> <span class="n">masternode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="n">cluster</span><span class="p">.</span><span class="nf">name</span><span class="p">:</span> <span class="n">elasticprod</span>
<span class="n">http</span><span class="p">.</span><span class="nf">port</span><span class="p">:</span> <span class="mi">9200</span>
<span class="n">network</span><span class="p">.</span><span class="nf">host</span><span class="p">:</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span>
<span class="n">node</span><span class="p">.</span><span class="nf">data</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">node</span><span class="p">.</span><span class="nf">ingest</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">node</span><span class="p">.</span><span class="nf">master</span><span class="p">:</span> <span class="kp">true</span>
<span class="n">node</span><span class="p">.</span><span class="nf">max_local_storage_nodes</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">node</span><span class="p">.</span><span class="nf">name</span><span class="p">:</span> <span class="n">masternode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="n">path</span><span class="p">.</span><span class="nf">data</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="no">ProgramData</span><span class="p">\</span><span class="no">Elastic</span><span class="p">\</span><span class="no">Elasticsearch</span><span class="p">\</span><span class="n">data</span>
<span class="n">path</span><span class="p">.</span><span class="nf">logs</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="no">ProgramData</span><span class="p">\</span><span class="no">Elastic</span><span class="p">\</span><span class="no">Elasticsearch</span><span class="p">\</span><span class="n">logs</span>
<span class="n">transport</span><span class="p">.</span><span class="nf">tcp</span><span class="p">.</span><span class="nf">port</span><span class="p">:</span> <span class="mi">9300</span>
<span class="n">xpack</span><span class="p">.</span><span class="nf">license</span><span class="p">.</span><span class="nf">self_generated</span><span class="p">.</span><span class="nf">type</span><span class="p">:</span> <span class="n">basic</span>
<span class="n">xpack</span><span class="p">.</span><span class="nf">security</span><span class="p">.</span><span class="nf">enabled</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">discovery</span><span class="p">.</span><span class="nf">seed_hosts</span><span class="p">:</span> <span class="p">[</span><span class="s2">"110.1.0.102:9300"</span><span class="p">,</span> <span class="s2">"110.1.0.103:9300"</span><span class="p">]</span>
<span class="n">path</span><span class="p">.</span><span class="nf">repo</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="n">repo</span></code></pre></figure>

<p>Check the installation with the following command:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">C</span><span class="p">:\</span><span class="o">...</span><span class="p">\</span><span class="n">codersite</span><span class="p">.</span><span class="nf">dev</span><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="no">XGET</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span><span class="p">:</span><span class="mi">9200</span><span class="o">/</span><span class="n">_cat</span><span class="o">/</span><span class="n">health?v</span><span class="o">=</span><span class="kp">true</span>
<span class="n">epoch</span>      <span class="n">timestamp</span> <span class="n">cluster</span>     <span class="n">status</span> <span class="n">node</span><span class="p">.</span><span class="nf">total</span> <span class="n">node</span><span class="p">.</span><span class="nf">data</span> <span class="n">shards</span> <span class="n">pri</span> <span class="n">relo</span> <span class="n">init</span> <span class="n">unassign</span> <span class="n">pending_tasks</span> <span class="n">max_task_wait_time</span> <span class="n">active_shards_percent</span>
<span class="mi">1611057767</span> <span class="mi">12</span><span class="p">:</span><span class="mo">02</span><span class="p">:</span><span class="mi">47</span>  <span class="n">elasticprod</span> <span class="n">green</span>           <span class="mi">1</span>         <span class="mi">0</span>      <span class="mi">0</span>   <span class="mi">0</span>    <span class="mi">0</span>    <span class="mi">0</span>        <span class="mi">0</span>             <span class="mi">0</span>                  <span class="o">-</span>                <span class="mf">100.0</span><span class="o">%</span></code></pre></figure>

<h2 id="configure-elasticsearch-cluster-settings-at-hot-node">Configure Elasticsearch cluster settings at Hot Node</h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">bootstrap</span><span class="p">.</span><span class="nf">memory_lock</span><span class="p">:</span> <span class="kp">true</span>
<span class="n">cluster</span><span class="p">.</span><span class="nf">name</span><span class="p">:</span> <span class="n">elasticprod</span>
<span class="n">discovery</span><span class="p">.</span><span class="nf">seed_hosts</span><span class="p">:</span>
  <span class="o">-</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span><span class="p">:</span><span class="mi">9300</span>
  <span class="o">-</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.103</span><span class="p">:</span><span class="mi">9300</span>
<span class="n">http</span><span class="p">.</span><span class="nf">port</span><span class="p">:</span> <span class="mi">9200</span>
<span class="n">network</span><span class="p">.</span><span class="nf">host</span><span class="p">:</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.102</span><span class="p">:</span><span class="mi">9300</span>
<span class="n">node</span><span class="p">.</span><span class="nf">data</span><span class="p">:</span> <span class="kp">true</span>
<span class="n">node</span><span class="p">.</span><span class="nf">ingest</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">node</span><span class="p">.</span><span class="nf">master</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">node</span><span class="p">.</span><span class="nf">max_local_storage_nodes</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">node</span><span class="p">.</span><span class="nf">name</span><span class="p">:</span> <span class="n">hotnode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="n">path</span><span class="p">.</span><span class="nf">data</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="no">ProgramData</span><span class="p">\</span><span class="no">Elastic</span><span class="p">\</span><span class="no">Elasticsearch</span><span class="p">\</span><span class="n">data</span>
<span class="n">path</span><span class="p">.</span><span class="nf">logs</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="no">ProgramData</span><span class="p">\</span><span class="no">Elastic</span><span class="p">\</span><span class="no">Elasticsearch</span><span class="p">\</span><span class="n">logs</span>
<span class="n">transport</span><span class="p">.</span><span class="nf">tcp</span><span class="p">.</span><span class="nf">port</span><span class="p">:</span> <span class="mi">9300</span>
<span class="n">xpack</span><span class="p">.</span><span class="nf">license</span><span class="p">.</span><span class="nf">self_generated</span><span class="p">.</span><span class="nf">type</span><span class="p">:</span> <span class="n">basic</span>
<span class="n">xpack</span><span class="p">.</span><span class="nf">security</span><span class="p">.</span><span class="nf">enabled</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">cluster</span><span class="p">.</span><span class="nf">initial_master_nodes</span><span class="p">:</span> <span class="n">masternode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="n">path</span><span class="p">.</span><span class="nf">repo</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="n">repo</span>
<span class="n">node</span><span class="p">.</span><span class="nf">attr</span><span class="p">.</span><span class="nf">box_type</span><span class="p">:</span> <span class="n">hot</span></code></pre></figure>

<p>Check the installation with the following command:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">C</span><span class="p">:\</span><span class="o">...</span><span class="p">\</span><span class="n">codersite</span><span class="p">.</span><span class="nf">dev</span><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="no">XGET</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span><span class="p">:</span><span class="mi">9200</span><span class="o">/</span><span class="n">_cat</span><span class="o">/</span><span class="n">nodes</span>
<span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span> <span class="mi">4</span> <span class="mi">66</span> <span class="mi">0</span>    <span class="n">lmr</span>      <span class="o">*</span> <span class="n">masternode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="mf">110.1</span><span class="o">.</span><span class="mf">0.102</span> <span class="mi">1</span> <span class="mi">60</span> <span class="mi">8</span>    <span class="n">cdhlrstw</span> <span class="o">-</span> <span class="n">hotnode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span></code></pre></figure>

<h2 id="configure-elasticsearch-cluster-settings-at-cold-node">Configure Elasticsearch cluster settings at Cold Node</h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">bootstrap</span><span class="p">.</span><span class="nf">memory_lock</span><span class="p">:</span> <span class="kp">true</span>
<span class="n">cluster</span><span class="p">.</span><span class="nf">name</span><span class="p">:</span> <span class="n">elasticprod</span>
<span class="n">discovery</span><span class="p">.</span><span class="nf">seed_hosts</span><span class="p">:</span>
  <span class="o">-</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span><span class="p">:</span><span class="mi">9300</span>
  <span class="o">-</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.102</span><span class="p">:</span><span class="mi">9300</span>
<span class="n">http</span><span class="p">.</span><span class="nf">port</span><span class="p">:</span> <span class="mi">9200</span>
<span class="n">network</span><span class="p">.</span><span class="nf">host</span><span class="p">:</span> <span class="mf">110.1</span><span class="o">.</span><span class="mf">0.103</span>
<span class="n">node</span><span class="p">.</span><span class="nf">data</span><span class="p">:</span> <span class="kp">true</span>
<span class="n">node</span><span class="p">.</span><span class="nf">ingest</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">node</span><span class="p">.</span><span class="nf">master</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">node</span><span class="p">.</span><span class="nf">max_local_storage_nodes</span><span class="p">:</span> <span class="mi">1</span>
<span class="n">node</span><span class="p">.</span><span class="nf">name</span><span class="p">:</span> <span class="n">coldnode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="n">path</span><span class="p">.</span><span class="nf">data</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="no">ProgramData</span><span class="p">\</span><span class="no">Elastic</span><span class="p">\</span><span class="no">Elasticsearch</span><span class="p">\</span><span class="n">data</span>
<span class="n">path</span><span class="p">.</span><span class="nf">logs</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="no">ProgramData</span><span class="p">\</span><span class="no">Elastic</span><span class="p">\</span><span class="no">Elasticsearch</span><span class="p">\</span><span class="n">logs</span>
<span class="n">transport</span><span class="p">.</span><span class="nf">tcp</span><span class="p">.</span><span class="nf">port</span><span class="p">:</span> <span class="mi">9300</span>
<span class="n">xpack</span><span class="p">.</span><span class="nf">license</span><span class="p">.</span><span class="nf">self_generated</span><span class="p">.</span><span class="nf">type</span><span class="p">:</span> <span class="n">basic</span>
<span class="n">xpack</span><span class="p">.</span><span class="nf">security</span><span class="p">.</span><span class="nf">enabled</span><span class="p">:</span> <span class="kp">false</span>
<span class="n">cluster</span><span class="p">.</span><span class="nf">initial_master_nodes</span><span class="p">:</span> <span class="n">masternode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="n">path</span><span class="p">.</span><span class="nf">repo</span><span class="p">:</span> <span class="no">E</span><span class="p">:\</span><span class="n">repo</span>
<span class="n">node</span><span class="p">.</span><span class="nf">attr</span><span class="p">.</span><span class="nf">box_type</span><span class="p">:</span> <span class="n">cold</span></code></pre></figure>

<p>Check the installation with the following command:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">C</span><span class="p">:\</span><span class="o">...</span><span class="p">\</span><span class="n">codersite</span><span class="p">.</span><span class="nf">dev</span><span class="o">&gt;</span><span class="n">curl</span> <span class="o">-</span><span class="no">XGET</span> <span class="n">http</span><span class="ss">:/</span><span class="o">/</span><span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span><span class="p">:</span><span class="mi">9200</span><span class="o">/</span><span class="n">_cat</span><span class="o">/</span><span class="n">nodes</span>
<span class="mf">110.1</span><span class="o">.</span><span class="mf">0.101</span> <span class="mi">5</span> <span class="mi">66</span>  <span class="mi">0</span>    <span class="n">lmr</span>      <span class="o">*</span> <span class="n">masternode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="mf">110.1</span><span class="o">.</span><span class="mf">0.102</span> <span class="mi">1</span> <span class="mi">60</span>  <span class="mi">0</span>    <span class="n">cdhlrstw</span> <span class="o">-</span> <span class="n">hotnode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span>
<span class="mf">110.1</span><span class="o">.</span><span class="mf">0.103</span> <span class="mi">2</span> <span class="mi">66</span> <span class="mi">25</span>    <span class="n">cdhlrstw</span> <span class="o">-</span> <span class="n">coldnode</span><span class="p">.</span><span class="nf">codersite</span><span class="p">.</span><span class="nf">dev</span></code></pre></figure>

<p>Now you can proceed to install kibana and logstash.</p>

<p>Here you can read an article which explain <a href="https://medium.com/@m.konda/just-elasticsearch-2-n-architecture-1fe4818c64aa" target="_blank">Elasticsearch</a> as simple as possible.</p>

<p>If you want to know how to scale in a distribuited system, I recommend this book: <a href="https://amzn.to/3rpxj15" target="_blank">Designing Data-Intensive Applications</a>.</p>

<p>If you want to know how to exploit logs data from elastic to set up a rate-limit algorithm, follow me, I will explain it in a near-future article!.</p>]]></content><author><name>Moises Gamio</name></author><category term="distribuitedsystems" /><category term="elastic" /><summary type="html"><![CDATA[Hot-warm architecture is a powerful way to separate an Elasticsearch deployment into “hot” data nodes and “warm” data nodes.]]></summary></entry><entry><title type="html">Clean Code</title><link href="https://codersite.dev/clean-code/" rel="alternate" type="text/html" title="Clean Code" /><published>2020-10-27T14:18:45+01:00</published><updated>2020-10-27T14:18:45+01:00</updated><id>https://codersite.dev/clean-code</id><content type="html" xml:base="https://codersite.dev/clean-code/"><![CDATA[<p>Clean code can be read and enhanced by a developer other than its original author.</p>

<p>This kind of practice <a href="https://amzn.to/3rAejgU" target="_blank">Robert C Martin</a> introduced it.</p>

<p>If you want to be a better programmer, you must follow these recommendations..</p>

<p><img src="/assets/images/cleanCode.jpg" alt="cleanCode" class="img-responsive" /></p>

<h2 id="clean-code-has-intention-revealing-names">Clean Code has Intention-Revealing names</h2>

<p>Names reveal intent. Someone who reads your code must understand the purpose of your variable, function, or class.</p>

<p>Real situation:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">int</span> <span class="n">sId</span><span class="p">;</span> <span class="sr">//su</span><span class="n">pplier</span> <span class="no">Id</span>
<span class="n">int</span> <span class="n">artDelPrice</span><span class="p">;</span></code></pre></figure>

<p>It must be refactored to this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">int</span> <span class="n">supplierId</span><span class="p">;</span>
<span class="n">int</span> <span class="n">articleDeliveredPrice</span><span class="p">;</span></code></pre></figure>

<p>Even with external dependencies:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> <span class="no">Z_E2F_RS_Result</span> <span class="ss">e2fResult: </span><span class="sr">//in</span><span class="n">gredients</span> <span class="n">recordset</span></code></pre></figure>

<p>It must be refactored to this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> <span class="no">Z_E2F_RS_Result</span> <span class="n">ingredients</span><span class="p">:</span></code></pre></figure>

<p>Imagine that we dont have the //ingredients comment in e2fResult variable. Then, further in any part of our code, when we try to process this variable, we have the following sentence:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">e2f</span> <span class="o">=</span> <span class="n">e2fResult</span><span class="p">[</span><span class="n">i</span><span class="p">]</span></code></pre></figure>

<p>And we don’t know what does e2f means!. Well, someone suggests asking the person responsible for this code. But that guy is not at the office. Well, send it an email, and he is on holiday!.</p>

<p>But if instead we adopt names which reveal intent from beginning, we could avoid these catastrophic scenarios.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">ingredient</span> <span class="o">=</span> <span class="n">ingredients</span><span class="p">[</span><span class="n">i</span><span class="p">]</span></code></pre></figure>

<h2 id="clean-code-tells-a-story">Clean Code tells a story</h2>

<p>When we try to fix bugs, when analyzing the secuence of actions (functions, methods), we realize the code does not communicate well the logical flow of these actions. It’s a nightmare to decode the meaning of these actions.</p>

<p>This will always happen because our initial design based on the initial requirements change over time. As developers, we are responsible for refactoring our code to made it a simple story that everybody can understand. For example, look at the following code:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">ACMEWebServiceClient</span><span class="p">.</span><span class="nf">login</span><span class="p">();</span>
<span class="k">if</span> <span class="p">(</span><span class="n">process</span><span class="p">.</span><span class="nf">equals</span><span class="p">(</span><span class="s2">"core"</span><span class="p">)</span> <span class="p">{</span>
    <span class="no">ACMEWebServiceClient</span><span class="p">.</span><span class="nf">transfer_buyersCoreData_to_ACME</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">process</span><span class="p">.</span><span class="nf">equals</span><span class="p">(</span><span class="s2">"status"</span><span class="p">))</span> <span class="p">{</span>
    <span class="no">ACMEWebServiceClient</span><span class="p">.</span><span class="nf">transfer_buyersStatusChanges_to_ACME</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">if</span> <span class="p">(</span><span class="n">process</span><span class="p">.</span><span class="nf">equals</span><span class="p">(</span><span class="s2">"events"</span><span class="p">))</span> <span class="p">{</span>
    <span class="no">ACMEWebServiceClient</span><span class="p">.</span><span class="nf">transfer_events_to_ACME</span><span class="p">();</span>
<span class="p">}</span>
<span class="no">ACMEServiceClient</span><span class="p">.</span><span class="nf">logout</span><span class="p">();</span></code></pre></figure>

<p>Other recommendations of clean code are:</p>

<ul>
  <li>Clean Code separates levels of detail</li>
  <li>Clean Code needs a few comments</li>
  <li>Clean Code has small methods</li>
  <li>Clean Code has Command/Query separation</li>
</ul>

<p>You can see a lot of typical algorithms implemented with Clean Code principles in the following <a href="https://lesen.amazon.de/kp/embed?asin=B086JCK6C4&amp;preview=newtab&amp;linkCode=kpe&amp;ref_=cm_sw_r_kb_dp_SD6EZ360ZYYSM2HAZHQ2" target="_blank">link</a></p>

<iframe width="336" height="550" src="https://www.youtube.com/embed/qf4vJrhNQn0" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name>Moises Gamio</name></author><category term="cleancode" /><category term="cleancode" /><category term="java" /><category term="solid" /><summary type="html"><![CDATA[Clean code can be read and enhanced by a developer other than its original author. Clean code has Intention-Revealing names]]></summary></entry><entry><title type="html">Documenting a SpringBoot REST API with OpenAPI 3</title><link href="https://codersite.dev/documenting-rest-api-openapi3/" rel="alternate" type="text/html" title="Documenting a SpringBoot REST API with OpenAPI 3" /><published>2020-10-02T15:18:45+02:00</published><updated>2022-03-18T10:38:00+01:00</updated><id>https://codersite.dev/documenting-rest-api-openapi3</id><content type="html" xml:base="https://codersite.dev/documenting-rest-api-openapi3/"><![CDATA[<p>The main idea for documenting our back-end RESTful APIs is to communicate to third-party developers what our endpoints are doing.</p>

<p>To learn more about REST see <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank">Representational State Transfer</a>.</p>

<p>Prerequisites:</p>

<ul>
  <li>Java 8.x</li>
  <li><a href="https://amzn.to/3JLvxAX" target="_blank">Maven 3.x</a></li>
</ul>

<h2 id="steps">Steps</h2>

<h3 id="1-create-the-maven-project">1. Create the maven project</h3>

<p>Go to <a href="https://start.spring.io/" target="_blank">spring initializr</a> and add the following dependencies:</p>

<p><img src="/assets/images/start.spring.io.jpg" alt="spring initializr" class="img-responsive" /></p>

<p>Once you generate the JAR maven project, open it in your favorite IDE.</p>

<p>Below, you can see the pom.xml to use:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="p">?</span><span class="n">xml</span> <span class="n">version</span><span class="o">=</span><span class="s2">"1.0"</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">"UTF-8"</span><span class="p">?</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">project</span> <span class="n">xmlns</span><span class="o">=</span><span class="s2">"http://maven.apache.org/POM/4.0.0"</span> <span class="n">xmlns</span><span class="ss">:xsi</span><span class="o">=</span><span class="s2">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="n">xsi</span><span class="ss">:schemaLocation</span><span class="o">=</span><span class="s2">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">modelVersion</span><span class="o">&gt;</span><span class="mf">4.0</span><span class="o">.</span><span class="mi">0</span><span class="o">&lt;</span><span class="sr">/modelVersion&gt;
	&lt;parent&gt;
		&lt;groupId&gt;org.springframework.boot&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">parent</span><span class="o">&lt;</span><span class="sr">/artifactId&gt;
		&lt;version&gt;2.3.4.RELEASE&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="n">relativePath</span><span class="o">/&gt;</span> <span class="o">&lt;!--</span> <span class="n">lookup</span> <span class="n">parent</span> <span class="n">from</span> <span class="n">repository</span> <span class="o">--&gt;</span>
	<span class="o">&lt;</span><span class="sr">/parent&gt;
	&lt;groupId&gt;com&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">openapi</span><span class="o">&lt;</span><span class="sr">/artifactId&gt;
	&lt;version&gt;0.0.1-SNAPSHOT&lt;/</span><span class="n">version</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="nb">name</span><span class="o">&gt;</span><span class="n">openapi</span><span class="o">&lt;</span><span class="sr">/name&gt;
	&lt;description&gt;openapi in Spring Boot&lt;/</span><span class="n">description</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">properties</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="n">java</span><span class="p">.</span><span class="nf">version</span><span class="o">&gt;</span><span class="mf">1.8</span><span class="o">&lt;</span><span class="sr">/java.version&gt;
	&lt;/</span><span class="n">properties</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">dependencies</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">boot</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-web&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="sr">/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="nb">test</span><span class="o">&lt;</span><span class="sr">/artifactId&gt;
			&lt;scope&gt;test&lt;/s</span><span class="n">cope</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="n">exclusions</span><span class="o">&gt;</span>
				<span class="o">&lt;</span><span class="n">exclusion</span><span class="o">&gt;</span>
					<span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="p">.</span><span class="nf">junit</span><span class="p">.</span><span class="nf">vintage</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
					&lt;artifactId&gt;junit-vintage-engine&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
				<span class="o">&lt;</span><span class="sr">/exclusion&gt;
			&lt;/ex</span><span class="n">clusions</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="sr">/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;org.springframework.boot&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">validation</span><span class="o">&lt;</span><span class="sr">/artifactId&gt;
		&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">boot</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
			&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="sr">/dependency&gt;
		&lt;dependency&gt;
			&lt;groupId&gt;com.h2database&lt;/</span><span class="n">groupId</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="n">artifactId</span><span class="o">&gt;</span><span class="n">h2</span><span class="o">&lt;</span><span class="sr">/artifactId&gt;
			&lt;scope&gt;runtime&lt;/s</span><span class="n">cope</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="sr">/dependency&gt;
	&lt;/</span><span class="n">dependencies</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="n">build</span><span class="o">&gt;</span>
		<span class="o">&lt;</span><span class="n">plugins</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="n">plugin</span><span class="o">&gt;</span>
				<span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">boot</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
				&lt;artifactId&gt;spring-boot-maven-plugin&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
			<span class="o">&lt;</span><span class="sr">/plugin&gt;
		&lt;/</span><span class="n">plugins</span><span class="o">&gt;</span>
	<span class="o">&lt;</span><span class="sr">/build&gt;
&lt;/</span><span class="n">project</span><span class="o">&gt;</span></code></pre></figure>

<p>To generate automatically the API documentation, we add the <a href="https://springdoc.org/" target="_blank">springdoc-openapi-ui</a> dependency to our pom.xml file.</p>

<p>The main idea for documenting our back-end RESTful APIs is to communicate what our endpoints are doing to third-party developers.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">&lt;</span><span class="n">dependency</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="n">groupId</span><span class="o">&gt;</span><span class="n">org</span><span class="p">.</span><span class="nf">springdoc</span><span class="o">&lt;</span><span class="sr">/groupId&gt;
   &lt;artifactId&gt;springdoc-openapi-ui&lt;/</span><span class="n">artifactId</span><span class="o">&gt;</span>
   <span class="o">&lt;</span><span class="n">version</span><span class="o">&gt;</span><span class="mf">1.3</span><span class="o">.</span><span class="mi">9</span><span class="o">&lt;</span><span class="sr">/version&gt;
&lt;/</span><span class="n">dependency</span><span class="o">&gt;</span></code></pre></figure>

<h3 id="2-configure-h2-database">2. Configure H2 Database</h3>

<p>The H2 in-memory database is volatile, which means data will be lost when we restart the application. We add the following properties to the application.properties file.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">spring</span><span class="p">.</span><span class="nf">datasource</span><span class="p">.</span><span class="nf">url</span><span class="o">=</span><span class="n">jdbc</span><span class="ss">:h2:mem:testdb</span>
<span class="n">spring</span><span class="p">.</span><span class="nf">datasource</span><span class="p">.</span><span class="nf">driverClassName</span><span class="o">=</span><span class="n">org</span><span class="p">.</span><span class="nf">h2</span><span class="o">.</span><span class="no">Driver</span>
<span class="n">spring</span><span class="p">.</span><span class="nf">datasource</span><span class="p">.</span><span class="nf">username</span><span class="o">=</span><span class="n">sa</span>
<span class="n">spring</span><span class="p">.</span><span class="nf">datasource</span><span class="p">.</span><span class="nf">password</span><span class="o">=</span><span class="n">password</span>
<span class="n">spring</span><span class="p">.</span><span class="nf">jpa</span><span class="p">.</span><span class="nf">database</span><span class="o">-</span><span class="n">platform</span><span class="o">=</span><span class="n">org</span><span class="p">.</span><span class="nf">hibernate</span><span class="p">.</span><span class="nf">dialect</span><span class="o">.</span><span class="no">H2Dialect</span></code></pre></figure>

<h3 id="3-create-jpa-entity--bookjava">3. Create JPA Entity – Book.java</h3>

<p>JPA stands for Java Persistence API and is a Java specification about how to handle relational data.</p>

<p>Even when Spring Data provides a standard programming model for different databases, switching from a SQL database to a <a href="https://codersite.dev/hot-warm-architecture-elasticsearch/" target="_blank">NoSQL database</a> is impossible without touching the source code.</p>

<p>@Entity annotation describes the Book data that will be stored by Spring Data and makes our Book object ready for storage in a JPA-based relational data store.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">model</span><span class="p">;</span>
<span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="nf">fasterxml</span><span class="p">.</span><span class="nf">jackson</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">JsonProperty</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="p">.</span><span class="nf">media</span><span class="o">.</span><span class="no">Schema</span><span class="p">;</span>
<span class="n">import</span> <span class="n">javax</span><span class="p">.</span><span class="nf">persistence</span><span class="p">.</span><span class="nf">*</span><span class="p">;</span>
<span class="n">import</span> <span class="n">javax</span><span class="p">.</span><span class="nf">validation</span><span class="p">.</span><span class="nf">constraints</span><span class="o">.</span><span class="no">NotBlank</span><span class="p">;</span>
<span class="n">import</span> <span class="n">javax</span><span class="p">.</span><span class="nf">validation</span><span class="p">.</span><span class="nf">constraints</span><span class="o">.</span><span class="no">Size</span><span class="p">;</span>
<span class="vi">@Schema</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"Book object"</span><span class="p">)</span>
<span class="vi">@Entity</span>
<span class="vi">@Table</span><span class="p">(</span><span class="nb">name</span><span class="o">=</span><span class="s2">"books"</span><span class="p">)</span>
<span class="kp">public</span> <span class="k">class</span> <span class="nc">Book</span> <span class="p">{</span>
  <span class="vi">@JsonProperty</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="s2">"id"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kp">true</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span>
  <span class="vi">@Schema</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"Unique identifier of the Book."</span><span class="p">,</span>
      <span class="n">example</span> <span class="o">=</span> <span class="s2">"1"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
  <span class="kp">private</span> <span class="n">long</span> <span class="nb">id</span><span class="p">;</span>
  <span class="vi">@JsonProperty</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="s2">"title"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kp">true</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
  <span class="vi">@Schema</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"Name of the title."</span><span class="p">,</span>
      <span class="n">example</span> <span class="o">=</span> <span class="s2">"Java"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
  <span class="vi">@NotBlank</span>
  <span class="vi">@Size</span><span class="p">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">20</span><span class="p">)</span>
  <span class="kp">private</span> <span class="no">String</span> <span class="n">title</span><span class="p">;</span>
  <span class="vi">@JsonProperty</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="s2">"author"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="kp">true</span><span class="p">,</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">30</span><span class="p">)</span>
  <span class="vi">@Schema</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"Name of the author."</span><span class="p">,</span>
      <span class="n">example</span> <span class="o">=</span> <span class="s2">"Max Abi"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
  <span class="vi">@NotBlank</span>
  <span class="vi">@Size</span><span class="p">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">30</span><span class="p">)</span>
  <span class="kp">private</span> <span class="no">String</span> <span class="n">author</span><span class="p">;</span>
  <span class="kp">public</span>  <span class="no">Book</span><span class="p">()</span> <span class="p">{}</span>
  <span class="vi">@Id</span>
  <span class="vi">@GeneratedValue</span><span class="p">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="no">GenerationType</span><span class="o">.</span><span class="no">AUTO</span><span class="p">)</span>
  <span class="kp">public</span> <span class="n">long</span> <span class="n">getId</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">id</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kp">public</span> <span class="n">void</span> <span class="n">setId</span><span class="p">(</span><span class="n">long</span> <span class="nb">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">id</span> <span class="o">=</span> <span class="nb">id</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="vi">@Column</span><span class="p">(</span><span class="nb">name</span> <span class="o">=</span> <span class="s2">"title"</span><span class="p">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">String</span> <span class="n">getTitle</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">title</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kp">public</span> <span class="n">void</span> <span class="n">setTitle</span><span class="p">(</span><span class="no">String</span> <span class="n">title</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">title</span> <span class="o">=</span> <span class="n">title</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="vi">@Column</span><span class="p">(</span><span class="nb">name</span> <span class="o">=</span> <span class="s2">"author"</span><span class="p">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kp">false</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">String</span> <span class="n">getAuthor</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">author</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="kp">public</span> <span class="n">void</span> <span class="n">setAuthor</span><span class="p">(</span><span class="no">String</span> <span class="n">author</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">author</span> <span class="o">=</span> <span class="n">author</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="4-create-a-string-data-repository--bookrepositoryjava">4. Create a String Data Repository – BookRepository.java</h3>

<p>Repositories are used to store and access data from different types of databases.</p>

<p>Spring Data JPA repository supports creating, reading, updating, and deleting records against our back-end datastore.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">respository</span><span class="p">;</span>
<span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">model</span><span class="o">.</span><span class="no">Book</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">data</span><span class="p">.</span><span class="nf">jpa</span><span class="p">.</span><span class="nf">repository</span><span class="o">.</span><span class="no">JpaRepository</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">stereotype</span><span class="o">.</span><span class="no">Repository</span><span class="p">;</span>
<span class="vi">@Repository</span>
<span class="kp">public</span> <span class="n">interface</span> <span class="no">BookRepository</span> <span class="n">extends</span> <span class="no">JpaRepository</span><span class="o">&lt;</span><span class="no">Book</span><span class="p">,</span> <span class="no">Long</span><span class="o">&gt;</span> <span class="p">{}</span></code></pre></figure>

<h3 id="5-create-spring-rest-controller-interface--bookapi">5. Create Spring Rest Controller Interface – BookApi</h3>

<p>We create an Interface to describe the API functionalities with the openapi annotations. In this way, we separate our API contract from the implementation Class.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">controller</span><span class="p">;</span>
<span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">model</span><span class="o">.</span><span class="no">Book</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="o">.</span><span class="no">Operation</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="o">.</span><span class="no">Parameter</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="p">.</span><span class="nf">media</span><span class="o">.</span><span class="no">Content</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="p">.</span><span class="nf">media</span><span class="o">.</span><span class="no">Schema</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="p">.</span><span class="nf">responses</span><span class="o">.</span><span class="no">ApiResponse</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="p">.</span><span class="nf">responses</span><span class="o">.</span><span class="no">ApiResponses</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">annotations</span><span class="p">.</span><span class="nf">tags</span><span class="o">.</span><span class="no">Tag</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">http</span><span class="o">.</span><span class="no">HttpStatus</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">http</span><span class="o">.</span><span class="no">ResponseEntity</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="p">.</span><span class="nf">*</span><span class="p">;</span>
<span class="n">import</span> <span class="n">javax</span><span class="p">.</span><span class="nf">validation</span><span class="o">.</span><span class="no">Valid</span><span class="p">;</span>
<span class="n">import</span> <span class="n">javax</span><span class="p">.</span><span class="nf">validation</span><span class="p">.</span><span class="nf">constraints</span><span class="o">.</span><span class="no">NotNull</span><span class="p">;</span>
<span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="nf">util</span><span class="o">.</span><span class="no">Collection</span><span class="p">;</span>
<span class="vi">@Tag</span><span class="p">(</span><span class="nb">name</span> <span class="o">=</span> <span class="s2">"book"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"the book API"</span><span class="p">)</span>
<span class="vi">@RequestMapping</span><span class="p">(</span><span class="s2">"/api/v1/books"</span><span class="p">)</span>
<span class="kp">public</span> <span class="n">interface</span> <span class="no">BookApi</span> <span class="p">{</span>
  <span class="vi">@Operation</span><span class="p">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s2">"Find book by ID"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"Returns a single book"</span><span class="p">,</span> <span class="n">tags</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"book"</span> <span class="p">})</span>
  <span class="vi">@ApiResponses</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="p">{</span>
      <span class="vi">@ApiResponse</span><span class="p">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s2">"200"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"successful operation"</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="vi">@Content</span><span class="p">(</span><span class="n">schema</span> <span class="o">=</span> <span class="vi">@Schema</span><span class="p">(</span><span class="n">implementation</span> <span class="o">=</span> <span class="no">Book</span><span class="p">.</span><span class="nf">class</span><span class="p">))),</span>
      <span class="vi">@ApiResponse</span><span class="p">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s2">"400"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"Invalid ID supplied"</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="vi">@Content</span><span class="p">),</span>
      <span class="vi">@ApiResponse</span><span class="p">(</span><span class="n">responseCode</span> <span class="o">=</span> <span class="s2">"404"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"Book not found"</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="vi">@Content</span><span class="p">)</span> <span class="p">})</span>
  <span class="vi">@RequestMapping</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="s2">"/{id}"</span><span class="p">,</span> <span class="n">produces</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"application/json"</span><span class="p">,</span>  <span class="s2">"application/vnd.api+json"</span><span class="p">},</span> <span class="nb">method</span> <span class="o">=</span> <span class="no">RequestMethod</span><span class="o">.</span><span class="no">GET</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">ResponseEntity</span><span class="o">&lt;</span><span class="no">Book</span><span class="o">&gt;</span> <span class="n">findById</span><span class="p">(</span>
      <span class="vi">@Parameter</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"ID of book"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
      <span class="vi">@PathVariable</span> <span class="n">long</span> <span class="nb">id</span><span class="p">,</span>
      <span class="vi">@NotNull</span> <span class="vi">@Parameter</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"select which kind of data to fetch"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
      <span class="vi">@Valid</span> <span class="vi">@RequestHeader</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="s2">"bookAuthorization"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span> <span class="no">String</span> <span class="n">bookAuthorization</span><span class="p">)</span>
      <span class="n">throws</span> <span class="no">Exception</span><span class="p">;</span>
  <span class="vi">@Operation</span><span class="p">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s2">"Get books"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"Returns a books collection"</span><span class="p">,</span> <span class="n">tags</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"book"</span> <span class="p">})</span>
  <span class="vi">@GetMapping</span><span class="p">(</span><span class="s2">"/"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">Collection</span><span class="o">&lt;</span><span class="no">Book</span><span class="o">&gt;</span> <span class="n">findBooks</span><span class="p">();</span>
  <span class="vi">@PutMapping</span><span class="p">(</span><span class="s2">"/{id}"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">Book</span> <span class="n">updateBook</span><span class="p">(</span><span class="vi">@PathVariable</span><span class="p">(</span><span class="s2">"id"</span><span class="p">)</span> <span class="n">final</span> <span class="no">String</span> <span class="nb">id</span><span class="p">,</span> <span class="vi">@RequestBody</span> <span class="n">final</span> <span class="no">Book</span> <span class="n">book</span><span class="p">);</span>
  <span class="vi">@PatchMapping</span><span class="p">(</span><span class="s2">"/{id}"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">Book</span> <span class="n">patchBook</span><span class="p">(</span><span class="vi">@PathVariable</span><span class="p">(</span><span class="s2">"id"</span><span class="p">)</span> <span class="n">final</span> <span class="no">String</span> <span class="nb">id</span><span class="p">,</span> <span class="vi">@RequestBody</span> <span class="n">final</span> <span class="no">Book</span> <span class="n">book</span><span class="p">);</span>
  <span class="vi">@Operation</span><span class="p">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s2">"Create book"</span><span class="p">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s2">"This can only be done by the logged in book."</span><span class="p">,</span> <span class="n">tags</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"book"</span> <span class="p">})</span>
  <span class="vi">@ApiResponses</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="p">{</span> <span class="vi">@ApiResponse</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"successful operation"</span><span class="p">,</span> <span class="n">content</span> <span class="o">=</span> <span class="p">{</span> <span class="vi">@Content</span><span class="p">(</span><span class="n">mediaType</span> <span class="o">=</span> <span class="s2">"application/json"</span><span class="p">,</span> <span class="n">schema</span> <span class="o">=</span> <span class="vi">@Schema</span><span class="p">(</span><span class="n">implementation</span> <span class="o">=</span> <span class="no">Book</span><span class="p">.</span><span class="nf">class</span><span class="p">)),</span> <span class="vi">@Content</span><span class="p">(</span><span class="n">mediaType</span> <span class="o">=</span> <span class="s2">"application/xml"</span><span class="p">,</span> <span class="n">schema</span> <span class="o">=</span> <span class="vi">@Schema</span><span class="p">(</span><span class="n">implementation</span> <span class="o">=</span> <span class="no">Book</span><span class="p">.</span><span class="nf">class</span><span class="p">))</span> <span class="p">})</span> <span class="p">})</span>
  <span class="vi">@PostMapping</span><span class="p">(</span><span class="n">value</span> <span class="o">=</span> <span class="s2">"/"</span><span class="p">,</span> <span class="n">consumes</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">"application/json"</span><span class="p">,</span> <span class="s2">"application/xml"</span><span class="p">,</span> <span class="s2">"application/x-www-form-urlencoded"</span> <span class="p">})</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">CREATED</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">ResponseEntity</span><span class="o">&lt;</span><span class="no">Book</span><span class="o">&gt;</span> <span class="n">postBook</span><span class="p">(</span>
      <span class="vi">@NotNull</span>
      <span class="vi">@Parameter</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"Created book object"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
      <span class="vi">@Valid</span> <span class="vi">@RequestBody</span> <span class="no">Book</span> <span class="n">body</span><span class="p">,</span>
      <span class="vi">@NotNull</span> <span class="vi">@Parameter</span><span class="p">(</span><span class="n">description</span> <span class="o">=</span> <span class="s2">"select which kind of data to fetch"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span>
      <span class="vi">@Valid</span> <span class="vi">@RequestHeader</span><span class="p">(</span><span class="n">value</span><span class="o">=</span><span class="s2">"bookAuthorization"</span><span class="p">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kp">true</span><span class="p">)</span> <span class="no">String</span> <span class="n">bookAuthorization</span><span class="p">)</span>
      <span class="n">throws</span> <span class="no">Exception</span><span class="p">;</span>
  <span class="vi">@RequestMapping</span><span class="p">(</span><span class="nb">method</span> <span class="o">=</span> <span class="no">RequestMethod</span><span class="o">.</span><span class="no">HEAD</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s2">"/"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">Book</span> <span class="n">headBook</span><span class="p">();</span>
  <span class="vi">@DeleteMapping</span><span class="p">(</span><span class="s2">"/{id}"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="n">long</span> <span class="n">deleteBook</span><span class="p">(</span><span class="vi">@PathVariable</span> <span class="n">final</span> <span class="n">long</span> <span class="nb">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<h3 id="6-create-spring-rest-controller-implementation--bookapicontrollerjava">6. Create Spring Rest Controller Implementation – BookApiController.java</h3>

<p>@RestController annotation tells Spring that this Class describes endpoints that should be made available over the web. The data returned by each method will be included in the response body.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">controller</span><span class="p">;</span>
<span class="n">import</span> <span class="n">java</span><span class="p">.</span><span class="nf">util</span><span class="o">.</span><span class="no">Collection</span><span class="p">;</span>
<span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">exception</span><span class="o">.</span><span class="no">BookNotFoundException</span><span class="p">;</span>
<span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">model</span><span class="o">.</span><span class="no">Book</span><span class="p">;</span>
<span class="n">import</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">respository</span><span class="o">.</span><span class="no">BookRepository</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">beans</span><span class="p">.</span><span class="nf">factory</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">Autowired</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">http</span><span class="o">.</span><span class="no">HttpStatus</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">http</span><span class="o">.</span><span class="no">ResponseEntity</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">DeleteMapping</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">PatchMapping</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">PathVariable</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">PutMapping</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">RequestBody</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">RequestMapping</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">RequestMethod</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">ResponseStatus</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">web</span><span class="p">.</span><span class="nf">bind</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">RestController</span><span class="p">;</span>
<span class="vi">@RestController</span>
<span class="kp">public</span> <span class="k">class</span> <span class="nc">BookApiController</span> <span class="n">implements</span> <span class="no">BookApi</span> <span class="p">{</span>
  <span class="vi">@Autowired</span>
  <span class="kp">private</span> <span class="no">BookRepository</span> <span class="n">repository</span><span class="p">;</span>
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="no">ResponseEntity</span><span class="o">&lt;</span><span class="no">Book</span><span class="o">&gt;</span> <span class="n">findById</span><span class="p">(</span>
      <span class="n">long</span> <span class="nb">id</span><span class="p">,</span>
      <span class="no">String</span> <span class="n">bookAuthorization</span><span class="p">)</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
    <span class="no">Book</span> <span class="n">book</span> <span class="o">=</span> <span class="n">repository</span><span class="p">.</span><span class="nf">findById</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">orElseThrow</span><span class="p">(()</span> <span class="o">-&gt;</span> <span class="n">new</span> <span class="no">BookNotFoundException</span><span class="p">(</span><span class="s2">"Employee not found for this id :: "</span> <span class="o">+</span> <span class="nb">id</span><span class="p">));</span>
    <span class="k">return</span> <span class="no">ResponseEntity</span><span class="p">.</span><span class="nf">ok</span><span class="p">().</span><span class="nf">body</span><span class="p">(</span><span class="n">book</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="no">Collection</span><span class="o">&lt;</span><span class="no">Book</span><span class="o">&gt;</span> <span class="n">findBooks</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">repository</span><span class="p">.</span><span class="nf">findAll</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="vi">@PutMapping</span><span class="p">(</span><span class="s2">"/{id}"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">Book</span> <span class="n">updateBook</span><span class="p">(</span><span class="vi">@PathVariable</span><span class="p">(</span><span class="s2">"id"</span><span class="p">)</span> <span class="n">final</span> <span class="no">String</span> <span class="nb">id</span><span class="p">,</span> <span class="vi">@RequestBody</span> <span class="n">final</span> <span class="no">Book</span> <span class="n">book</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">book</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="vi">@PatchMapping</span><span class="p">(</span><span class="s2">"/{id}"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">Book</span> <span class="n">patchBook</span><span class="p">(</span><span class="vi">@PathVariable</span><span class="p">(</span><span class="s2">"id"</span><span class="p">)</span> <span class="n">final</span> <span class="no">String</span> <span class="nb">id</span><span class="p">,</span> <span class="vi">@RequestBody</span> <span class="n">final</span> <span class="no">Book</span> <span class="n">book</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">book</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="vi">@Override</span>
  <span class="kp">public</span> <span class="no">ResponseEntity</span><span class="o">&lt;</span><span class="no">Book</span><span class="o">&gt;</span> <span class="n">postBook</span><span class="p">(</span>
      <span class="no">Book</span> <span class="n">body</span><span class="p">,</span>
      <span class="no">String</span> <span class="n">bookAuthorization</span><span class="p">)</span> <span class="n">throws</span> <span class="no">Exception</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">new</span> <span class="no">ResponseEntity</span><span class="o">&lt;</span><span class="no">Book</span><span class="o">&gt;</span><span class="p">(</span><span class="n">repository</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">body</span><span class="p">),</span> <span class="no">HttpStatus</span><span class="o">.</span><span class="no">CREATED</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="vi">@RequestMapping</span><span class="p">(</span><span class="nb">method</span> <span class="o">=</span> <span class="no">RequestMethod</span><span class="o">.</span><span class="no">HEAD</span><span class="p">,</span> <span class="n">value</span> <span class="o">=</span> <span class="s2">"/"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="no">Book</span> <span class="n">headBook</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">new</span> <span class="no">Book</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="vi">@DeleteMapping</span><span class="p">(</span><span class="s2">"/{id}"</span><span class="p">)</span>
  <span class="vi">@ResponseStatus</span><span class="p">(</span><span class="no">HttpStatus</span><span class="o">.</span><span class="no">OK</span><span class="p">)</span>
  <span class="kp">public</span> <span class="n">long</span> <span class="n">deleteBook</span><span class="p">(</span><span class="vi">@PathVariable</span> <span class="n">final</span> <span class="n">long</span> <span class="nb">id</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">id</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="7-configure-openapi--openapiconfigjava">7. Configure openApi – OpenApiConfig.java</h3>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">.</span><span class="nf">config</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">models</span><span class="p">.</span><span class="nf">info</span><span class="o">.</span><span class="no">Info</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">models</span><span class="o">.</span><span class="no">Components</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">models</span><span class="o">.</span><span class="no">OpenAPI</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">models</span><span class="p">.</span><span class="nf">info</span><span class="o">.</span><span class="no">Contact</span><span class="p">;</span>
<span class="n">import</span> <span class="n">io</span><span class="p">.</span><span class="nf">swagger</span><span class="p">.</span><span class="nf">v3</span><span class="p">.</span><span class="nf">oas</span><span class="p">.</span><span class="nf">models</span><span class="p">.</span><span class="nf">info</span><span class="o">.</span><span class="no">License</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">context</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">Bean</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">context</span><span class="p">.</span><span class="nf">annotation</span><span class="o">.</span><span class="no">Configuration</span><span class="p">;</span>
<span class="vi">@Configuration</span>
<span class="kp">public</span> <span class="k">class</span> <span class="nc">OpenApiConfig</span> <span class="p">{</span>
  <span class="vi">@Bean</span>
  <span class="kp">public</span> <span class="no">OpenAPI</span> <span class="n">customOpenAPI</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">new</span> <span class="no">OpenAPI</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">components</span><span class="p">(</span><span class="n">new</span> <span class="no">Components</span><span class="p">())</span>
        <span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="n">new</span> <span class="no">Info</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="s2">"Book Application API"</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">description</span><span class="p">(</span><span class="s2">"This is a sample Spring Boot RESTful service using springdoc-openapi and OpenAPI 3."</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">termsOfService</span><span class="p">(</span><span class="s2">"terms"</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">contact</span><span class="p">(</span><span class="n">new</span> <span class="no">Contact</span><span class="p">().</span><span class="nf">email</span><span class="p">(</span><span class="s2">"@codersite.dev"</span><span class="p">))</span>
            <span class="p">.</span><span class="nf">license</span><span class="p">(</span><span class="n">new</span> <span class="no">License</span><span class="p">().</span><span class="nf">name</span><span class="p">(</span><span class="s2">"GNU"</span><span class="p">))</span>
            <span class="p">.</span><span class="nf">version</span><span class="p">(</span><span class="s2">"1.0"</span><span class="p">)</span>
        <span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h3 id="8-running-application">8. Running Application</h3>

<p>This <a href="https://amzn.to/3JQ440Q" target="_blank">Spring boot</a> application has an entry point Java class called OpenapiApplication.java, which you can run to start the application.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">package</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">boot</span><span class="o">.</span><span class="no">SpringApplication</span><span class="p">;</span>
<span class="n">import</span> <span class="n">org</span><span class="p">.</span><span class="nf">springframework</span><span class="p">.</span><span class="nf">boot</span><span class="p">.</span><span class="nf">autoconfigure</span><span class="o">.</span><span class="no">SpringBootApplication</span><span class="p">;</span>
<span class="vi">@SpringBootApplication</span>
<span class="kp">public</span> <span class="k">class</span> <span class="nc">OpenapiApplication</span> <span class="p">{</span>
	<span class="kp">public</span> <span class="n">static</span> <span class="n">void</span> <span class="n">main</span><span class="p">(</span><span class="no">String</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">{</span>
		<span class="no">SpringApplication</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="no">OpenapiApplication</span><span class="p">.</span><span class="nf">class</span><span class="p">,</span> <span class="n">args</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>@SpringBootApplication add the following functionalities:</p>

<ul>
  <li>OpenApiApplication Class becomes a Configuration class.</li>
  <li>It enables Component scan, which means looking for other components, configurations, controllers, and services in the com.openapi package.</li>
  <li>It enables autoconfiguration; Spring Boot looks for other JAR files in the classpath and configures it automatically, e.g., H2 database, JPA.</li>
</ul>

<p>Spring Boot will detect and start an embedded Tomcat webserver.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mo">02</span><span class="o">.</span><span class="mi">659</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="p">.</span><span class="nf">s</span><span class="p">.</span><span class="nf">d</span><span class="p">.</span><span class="nf">r</span><span class="p">.</span><span class="nf">c</span><span class="o">.</span><span class="no">RepositoryConfigurationDelegate</span> <span class="p">:</span> <span class="no">Bootstrapping</span> <span class="no">Spring</span> <span class="no">Data</span> <span class="no">JPA</span> <span class="n">repositories</span> <span class="k">in</span> <span class="no">DEFERRED</span> <span class="n">mode</span><span class="o">.</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mo">02</span><span class="o">.</span><span class="mi">881</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="p">.</span><span class="nf">s</span><span class="p">.</span><span class="nf">d</span><span class="p">.</span><span class="nf">r</span><span class="p">.</span><span class="nf">c</span><span class="o">.</span><span class="no">RepositoryConfigurationDelegate</span> <span class="p">:</span> <span class="no">Finished</span> <span class="no">Spring</span> <span class="no">Data</span> <span class="n">repository</span> <span class="n">scanning</span> <span class="k">in</span> <span class="mi">201</span><span class="n">ms</span><span class="o">.</span> <span class="no">Found</span> <span class="mi">1</span> <span class="no">JPA</span> <span class="n">repository</span> <span class="n">interfaces</span><span class="o">.</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mo">04</span><span class="o">.</span><span class="mi">812</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="n">o</span><span class="p">.</span><span class="nf">s</span><span class="p">.</span><span class="nf">b</span><span class="p">.</span><span class="nf">w</span><span class="p">.</span><span class="nf">embedded</span><span class="p">.</span><span class="nf">tomcat</span><span class="o">.</span><span class="no">TomcatWebServer</span>  <span class="p">:</span> <span class="no">Tomcat</span> <span class="n">initialized</span> <span class="n">with</span> <span class="n">port</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="mi">8080</span> <span class="p">(</span><span class="n">http</span><span class="p">)</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mo">04</span><span class="o">.</span><span class="mi">847</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="n">o</span><span class="p">.</span><span class="nf">apache</span><span class="p">.</span><span class="nf">catalina</span><span class="p">.</span><span class="nf">core</span><span class="o">.</span><span class="no">StandardService</span>   <span class="p">:</span> <span class="no">Starting</span> <span class="n">service</span> <span class="p">[</span><span class="no">Tomcat</span><span class="p">]</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mo">04</span><span class="o">.</span><span class="mi">848</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="n">org</span><span class="p">.</span><span class="nf">apache</span><span class="p">.</span><span class="nf">catalina</span><span class="p">.</span><span class="nf">core</span><span class="o">.</span><span class="no">StandardEngine</span>  <span class="p">:</span> <span class="no">Starting</span> <span class="no">Servlet</span> <span class="ss">engine: </span><span class="p">[</span><span class="no">Apache</span> <span class="no">Tomcat</span><span class="o">/</span><span class="mf">9.0</span><span class="o">.</span><span class="mi">38</span><span class="p">]</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mo">05</span><span class="o">.</span><span class="mi">131</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="n">o</span><span class="p">.</span><span class="nf">a</span><span class="p">.</span><span class="nf">c</span><span class="p">.</span><span class="nf">c</span><span class="o">.</span><span class="no">C</span><span class="p">.</span><span class="nf">[</span><span class="no">Tomcat</span><span class="p">].</span><span class="nf">[</span><span class="n">localhost</span><span class="p">].</span><span class="nf">[</span><span class="o">/</span><span class="p">]</span>       <span class="p">:</span> <span class="no">Initializing</span> <span class="no">Spring</span> <span class="n">embedded</span> <span class="no">WebApplicationContext</span>
<span class="p">.</span>
<span class="nf">.</span>
<span class="o">.</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mf">11.700</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="n">o</span><span class="p">.</span><span class="nf">s</span><span class="p">.</span><span class="nf">b</span><span class="p">.</span><span class="nf">w</span><span class="p">.</span><span class="nf">embedded</span><span class="p">.</span><span class="nf">tomcat</span><span class="o">.</span><span class="no">TomcatWebServer</span>  <span class="p">:</span> <span class="no">Tomcat</span> <span class="n">started</span> <span class="n">on</span> <span class="n">port</span><span class="p">(</span><span class="n">s</span><span class="p">):</span> <span class="mi">8080</span> <span class="p">(</span><span class="n">http</span><span class="p">)</span> <span class="n">with</span> <span class="n">context</span> <span class="n">path</span> <span class="s1">''</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mf">11.703</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="no">DeferredRepositoryInitializationListener</span> <span class="p">:</span> <span class="no">Triggering</span> <span class="n">deferred</span> <span class="n">initialization</span> <span class="n">of</span> <span class="no">Spring</span> <span class="no">Data</span> <span class="n">repositories</span><span class="err">…</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mf">12.668</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="no">DeferredRepositoryInitializationListener</span> <span class="p">:</span> <span class="no">Spring</span> <span class="no">Data</span> <span class="n">repositories</span> <span class="n">initialized!</span>
<span class="mi">2021</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">12</span><span class="p">:</span><span class="mi">48</span><span class="p">:</span><span class="mf">12.704</span>  <span class="no">INFO</span> <span class="mi">9312</span> <span class="o">---</span> <span class="p">[</span>  <span class="n">restartedMain</span><span class="p">]</span> <span class="n">com</span><span class="p">.</span><span class="nf">openapi</span><span class="o">.</span><span class="no">OpenapiApplication</span>           <span class="p">:</span> <span class="no">Started</span> <span class="no">OpenapiApplication</span> <span class="k">in</span> <span class="mf">14.363</span> <span class="n">seconds</span> <span class="p">(</span><span class="no">JVM</span> <span class="n">running</span> <span class="k">for</span> <span class="mf">18.621</span><span class="p">)</span></code></pre></figure>

<p>Then, when we run our application, we can see the online documentation at:</p>

<p><a href="http://localhost:8080/swagger-ui.html" target="_blank">http://localhost:8080/swagger-ui.html</a></p>

<p><img src="/assets/images/openapi-3.jpg" alt="openapi3" class="img-responsive" /></p>

<p>OpenAPI includes a “Try it out” button, which can be used to actually try out the API, not just read its documentation.</p>

<p>You can see the source code in the following link:</p>

<p><a href="https://github.com/mgamio/openapi-springboot.git" target="_blank">https://github.com/mgamio/openapi-springboot.git</a></p>

<p>Most of the companies usually follow a <a href="https://swagger.io/blog/api-design/design-first-or-code-first-api-development/" target="_blank">Design-First API</a> Strategy using SwaggerHub product for example. But the export plugins are not always aligned with the most updated version of OpenAPI.</p>

<p>Once you receive the <a href="https://codersite.dev/uml-diagrams-for-java-developers/" target="_blank">technical specifications in UML</a>, you need to decide whether to take the Design First approach or the Code First approach.</p>

<p>Documenting an API facilitates interaction between internal development teams that build different web services for the same product.</p>

<iframe type="text/html" width="336" height="550" frameborder="0" allowfullscreen="" style="max-width:100%" src="https://lesen.amazon.de/kp/card?asin=B086JCK6C4&amp;preview=inline&amp;linkCode=kpe&amp;ref_=cm_sw_r_kb_dp_f2H6Fb7NENATK&amp;tag=codersite20-20"></iframe>]]></content><author><name>Moises Gamio</name></author><category term="rest" /><category term="rest" /><category term="springboot" /><summary type="html"><![CDATA[The main idea for documenting your back-end RESTful APIs with openAPIi 3 to communicate to third-party developers what your endpoints are doing]]></summary></entry><entry><title type="html">Big O Notation: Analysis of Algorithms - coding interview</title><link href="https://codersite.dev/big-o-notation-analysis-of-algorithms/" rel="alternate" type="text/html" title="Big O Notation: Analysis of Algorithms - coding interview" /><published>2020-06-22T15:18:45+02:00</published><updated>2022-03-22T17:50:00+01:00</updated><id>https://codersite.dev/big-o-notation-analysis-of-algorithms</id><content type="html" xml:base="https://codersite.dev/big-o-notation-analysis-of-algorithms/"><![CDATA[<p>Big O Notation is a mathematical notation that helps us analyze how complex an algorithm is in terms of time and space. When we build an application for one user or millions of users, it matters.</p>

<p>We implement different algorithms to solve one problem and measure how efficient is one respect to the other ones.</p>

<p>The first study about Analysis of Algorithms was published by Knuth in 1968. <a href="https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming" target="_blank">The Art of Computer Programming</a>.</p>

<h2 id="time-and-space-complexity">Time and Space complexity</h2>

<p>Time complexity is related to how many steps takes an algorithm.</p>

<p>Space complexity is related to how efficient an algorithm is using the memory and disk.</p>

<p>Both terms depend on the input size, the number of items in the input. Moreover, we can analyze the complexity based on three cases:</p>

<ul>
  <li>
    <p>Best case or Big Omega Ω(n): Usually the algorithm executes in one step independently of the input size.</p>
  </li>
  <li>
    <p>Average case or Big Theta Θ(n): If the the input size is ramdom</p>
  </li>
  <li>
    <p>Worst-case or Big O Notation  O(n): Gives us an upper bound on the runtime for any input. It gives us a kind of guarantee that the algorithm will never take any longer with a new input size.</p>
  </li>
</ul>

<h2 id="order-of-growth">Order of growth</h2>

<p>The order of growth is related to how the runtime of an algorithm increases when the size of the input increases without limit and tells us how efficient the algorithm is. Therefore, we can compare the relative performance of alternative algorithms.</p>

<p>Big O Notation: <strong>Common order-of-growth classifications</strong>:</p>

<p><img src="/assets/images/order-of-growth.jpg" alt="order-of-growth" class="img-responsive" /></p>

<h2 id="big-o-notation-examples">Big O Notation: examples</h2>

<p><strong>O(1) – Constant</strong></p>

<p>It does not matter if the input contains 1000 or 1 million items, the code always executes in one step.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">void</span> <span class="n">constant</span><span class="p">(</span><span class="no">List</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">list</span><span class="p">,</span> <span class="no">String</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">list</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">item</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>In a best-case scenario, an <em>add</em> method takes O(1) time. The worst-case scenario takes O(n).</p>

<p><strong>O(N) – linear</strong></p>

<p>An algorithm runs in O(N) time if the number of steps depends on the number of items included in the input.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">int</span> <span class="n">sum</span><span class="p">(</span><span class="n">int</span><span class="p">[]</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">int</span> <span class="n">sum</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">i</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">numbers</span><span class="p">.</span><span class="nf">length</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">sum</span><span class="o">+=</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>The main idea in Analysis of Algorithms is always to improve the algorithm performance, by reducing the number of steps and comparisons. You can visit <a href="https://codersite.dev/given-positive-number-n-find-smallest-number-same-number-digits/" target="_blank">find the smallest number with the same number of digits</a>, for instance. Moreover, the simpler and more intuitive an algorithm is, the more useful and efficient it will be.</p>

<p><strong>O(N<sup>2</sup>) – quadratic</strong></p>

<p>If an algorithm includes two loops nested in its code, we could say that it’s running in quadratic time O(N<sup>2</sup>). For instance, when a 2D matrix is initialized in a tic-tac-toe game.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> <span class="no">String</span> <span class="p">[][]</span> <span class="n">board</span><span class="p">;</span>

<span class="kp">public</span> <span class="n">void</span> <span class="n">initializeBoard</span><span class="p">(</span><span class="n">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">this</span><span class="p">.</span><span class="nf">board</span> <span class="o">=</span> <span class="n">new</span> <span class="no">String</span><span class="p">[</span><span class="n">size</span><span class="p">][</span><span class="n">size</span><span class="p">];</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="n">size</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">board</span><span class="p">[</span><span class="n">x</span><span class="p">][</span><span class="n">y</span><span class="p">]</span> <span class="o">=</span> <span class="s2">" "</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>O(N<sup>3</sup>) – Cubic</strong></p>

<p>When the code includes at the most three nested loops, then the algorithm runs in Cubic time. For example: given N integers, how many triples sum to exactly zero?. One approach (not the best) is to use three nested loops.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">int</span> <span class="n">countThreeSum</span><span class="p">(</span><span class="n">int</span><span class="p">[]</span> <span class="n">numbers</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">int</span> <span class="no">N</span> <span class="o">=</span><span class="n">numbers</span><span class="p">.</span><span class="nf">length</span><span class="p">;</span>
  <span class="n">int</span> <span class="n">count</span> <span class="o">=</span><span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">N</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="no">N</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">k</span><span class="o">&lt;</span><span class="no">N</span><span class="p">;</span> <span class="n">k</span><span class="o">++</span><span class="p">)</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">numbers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="n">numbers</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
          <span class="n">count</span><span class="o">++</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p><strong>O(LogN) – logarithmic</strong></p>

<p>This kind of algorithm produces a growth curve that peaks at the beginning and slowly flattens out as the size of the input increase.</p>

<p>Log28 = 3</p>

<p>Log216 = 4</p>

<p>Log232 = 5</p>

<p>The binary search uses at most LogN key compares to search in a sorted array of size N. With 8 elements take 3 comparisons, with 16 elements takes 4 comparisons, with 32 elements takes 5 comparisons, and so on.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">static</span> <span class="o">&lt;</span><span class="no">T</span> <span class="n">extends</span> <span class="no">Comparable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">boolean</span> <span class="n">search</span><span class="p">(</span><span class="no">T</span> <span class="n">target</span><span class="p">,</span> <span class="no">T</span><span class="p">[]</span> <span class="n">array</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">int</span> <span class="n">min</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="n">int</span> <span class="n">max</span> <span class="o">=</span> <span class="n">array</span><span class="p">.</span><span class="nf">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">min</span> <span class="o">&lt;=</span> <span class="n">max</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">min</span> <span class="o">+</span> <span class="n">max</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="nf">compareTo</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">max</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">target</span><span class="p">.</span><span class="nf">compareTo</span><span class="p">(</span><span class="n">array</span><span class="p">[</span><span class="n">mid</span><span class="p">])</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">min</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">return</span> <span class="kp">true</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="kp">false</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<h2 id="the-complexity-of-an-algorithm">The complexity of an algorithm</h2>

<p>To find the Big O complexity of an algorithm follows the following rules:</p>

<ul>
  <li>Ignore the lower order terms</li>
  <li>Drop the leading constants</li>
</ul>

<p>Example: If the time complexity of an algorithm is 2n<sup>3</sup> + 4n + 3. Its Big O complexity simplifies to O(n<sup>3</sup>).</p>

<p><strong>How to find the time complexity of an algorithm</strong></p>

<p>Given the following algorithm:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="no">Integer</span> <span class="n">sumEvenNumbers</span><span class="p">(</span><span class="no">Integer</span> <span class="no">N</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">number</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">number</span> <span class="o">&lt;=</span> <span class="no">N</span><span class="p">;</span> <span class="n">number</span><span class="o">++</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">number</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
      <span class="n">sum</span> <span class="o">=</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">number</span><span class="p">;</span>

  <span class="k">return</span> <span class="n">sum</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>First, we split the code into individual operations and then compute how many times it is being executed as is shown in the following table.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Description</th>
      <th style="text-align: center">Number of executions</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">int sum = 0;</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">int number = 1;</td>
      <td style="text-align: center">1</td>
    </tr>
    <tr>
      <td style="text-align: center">number &lt;= N;</td>
      <td style="text-align: center">N</td>
    </tr>
    <tr>
      <td style="text-align: center">number++</td>
      <td style="text-align: center">N</td>
    </tr>
    <tr>
      <td style="text-align: center">if ((number % 2) == 0)</td>
      <td style="text-align: center">N</td>
    </tr>
    <tr>
      <td style="text-align: center">sum = sum + number;</td>
      <td style="text-align: center">N</td>
    </tr>
    <tr>
      <td style="text-align: center">return sum;</td>
      <td style="text-align: center">1</td>
    </tr>
  </tbody>
</table>

<p>Now, we need to sum up how many times each operation is executing.</p>

<p>Time complexity = 1 + 1 + N + N + N + N + 1 =&gt;   4N + 3</p>

<h2 id="why-big-o-notation-ignores-constants">Why Big O Notation ignores constants?</h2>

<p>Big O Notation describes how many steps are required relative to the number of data elements. And it serves as a way to classify the long-term growth rate of algorithms.</p>

<p>For instance, for all amounts of data, O(N) will be faster than O(N<sup>2</sup>) as shown in the following figure:</p>

<p><img src="/assets/images/bigONotation-1.jpg" alt="bigONotation-1" class="img-responsive" /></p>

<p>Now, if we compare O(100N) with O(N<sup>2</sup>), we can see that O(N<sup>2</sup>) is faster than O(100N) for some amounts of data as shown in the following figure:</p>

<p><img src="/assets/images/bigONotation-2.jpg" alt="bigONotation-2" class="img-responsive" /></p>

<p>But after a point, O(100N) becomes faster and remains faster for all increasing amounts of data from that point onward. And that is the reason why Big O Notation ignores constants. Because of this, O(100N) is written as O(N).</p>

<p>This article was just an introduction to algorithm analysis to face a real code interview as developers, where they are asked to build rough models. If you want to create a mathematical model for the execution time of a discrete operation, for example, you should take a course in <a href="https://en.wikipedia.org/wiki/Discrete_mathematics" target="_blank">discrete mathematics</a>.</p>

<p>Being ready to analyze algorithms requires practice and study of different algorithms, and you can find it in this <a href="https://amzn.to/3HrGXrF" target="_blank">link</a> with a lot of explanation details.</p>]]></content><author><name>Moises Gamio</name></author><category term="bigONotation" /><summary type="html"><![CDATA[Big O Notation helps us to determine how complex an algorithm is. It matters when we build an application for millions of users]]></summary></entry><entry><title type="html">SOLID principles: The Definitive Guide (Part I)</title><link href="https://codersite.dev/solid-principles-the-definitive-guide/" rel="alternate" type="text/html" title="SOLID principles: The Definitive Guide (Part I)" /><published>2020-06-15T15:18:45+02:00</published><updated>2022-03-11T17:50:00+01:00</updated><id>https://codersite.dev/solid-principles-the-definitive-guide</id><content type="html" xml:base="https://codersite.dev/solid-principles-the-definitive-guide/"><![CDATA[<p>SOLID principles tell you how to arrange your functions into classes and how those classes should be interrelated.</p>

<p>Robert C. Martin introduced it. <a href="https://web.archive.org/web/20150906155800/http://www.objectmentor.com/resources/articles/Principles_and_Patterns.pdf" target="_blank">Design Principles</a>.</p>

<p>When SOLID principles are applied correctly, your software infrastructure will be able to tolerate changes, it will be easier to understand, and it will be focuser on reusable components.</p>

<p>Let’s start with the first principle.</p>

<h2 id="solid-principles-single-responsibility-principle-srp">SOLID principles: Single Responsibility Principle (SRP)</h2>

<blockquote>
  <p>… “a class should only have one reason to change“</p>
</blockquote>

<p>This principle states that <strong>a class should only have one responsibility</strong>.</p>

<p>For instance, imagine an online store that issues its cards for its customers, and from the beginning, the Payment and Card teams are in mutual agreement to apply for interest and to lock cards from customers who are in late payments for 14 days or more.</p>

<p>In the following code, we have the first design of the Payment Class, which supports both requirements.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">Payment</span> <span class="p">{</span>
  <span class="kp">public</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="no">MAX_DAYS</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
  
  <span class="kp">public</span> <span class="n">void</span> <span class="n">batch</span><span class="p">(</span><span class="no">List</span><span class="o">&lt;</span><span class="no">Customer</span><span class="o">&gt;</span> <span class="n">customers</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="no">Customer</span> <span class="n">customer</span> <span class="p">:</span> <span class="n">customers</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">int</span> <span class="n">nDays</span> <span class="o">=</span> <span class="n">latePaymentDays</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">nDays</span> <span class="o">&gt;=</span> <span class="no">MAX_DAYS</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">applyLatePaymentInterest</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
        <span class="n">lockCard</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h2 id="the-problem-a-class-has-more-than-one-responsibility">The Problem: A Class has more than one responsibility</h2>

<p>But suddenly, the Cards team wants to change the validation to 10 days. However, the Payments team manages other policies related to when interests by late payment are applied. As a result, the Payments team enters in disagreement with the Cards team. This scenario is a clear example of how this Class design violates the Single Responsibility Principle because the Payment Class not only has more than one reason to change but also it breaks the business logic of the Payments team. Moreover, both teams are stuck on how to proceed.</p>

<p>The following figure shows the Class with different responsibilities:</p>

<p><img src="/assets/images/payment1.jpg" alt="Class with different responsibilities" class="img-responsive" /></p>

<h2 id="the-solution-create-a-class-with-only-one-responsibility">The solution: Create a Class with only one responsibility</h2>

<p>What do we need to do?. In this scenario, we can apply the <strong>S</strong>ingle Responsibility Principle</p>

<p>Firstly, we move the <em>lockCard()</em> responsibility to a new Card Class. This technique is most known as refactoring</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">Card</span> <span class="p">{</span>
  <span class="kp">public</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="no">MAX_DAYS</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>
  
  <span class="kp">public</span> <span class="n">void</span> <span class="n">batch</span><span class="p">(</span><span class="no">List</span> <span class="n">customers</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="no">Customer</span> <span class="n">customer</span> <span class="p">:</span> <span class="n">customers</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">int</span> <span class="n">nDays</span> <span class="o">=</span> <span class="no">Payment</span><span class="p">.</span><span class="nf">latePaymentDays</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">nDays</span> <span class="o">&gt;=</span> <span class="no">MAX_DAYS</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">lockCard</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>After that change and following <a href="https://codersite.dev/clean-code/" target="_blank">Clean code</a> principles, we can see how it looks the new Payment Class (refactored as well):</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">Payment</span> <span class="p">{</span>
  <span class="kp">public</span> <span class="n">static</span> <span class="n">final</span> <span class="n">int</span> <span class="no">MAX_DAYS</span> <span class="o">=</span> <span class="mi">14</span><span class="p">;</span>
  
  <span class="kp">public</span> <span class="n">void</span> <span class="n">batch</span><span class="p">(</span><span class="no">List</span><span class="o">&lt;</span><span class="no">Customer</span><span class="o">&gt;</span> <span class="n">customers</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="no">Customer</span> <span class="n">customer</span> <span class="p">:</span> <span class="n">customers</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">int</span> <span class="n">nDays</span> <span class="o">=</span> <span class="n">latePaymentDays</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">nDays</span> <span class="o">&gt;=</span> <span class="no">MAX_DAYS</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">applyLatePaymentInterest</span><span class="p">(</span><span class="n">customer</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Finally, new changes to the MAX_DAYS variable will only depend on the requirements of every team separately. The following figure shows the Classes for different actors, without conflicts.</p>

<p><img src="/assets/images/payment2b.jpeg" alt="Class for different actors" class="img-responsive" /></p>

<p>Therefore, the Payment Class is only responsible for supporting to the Payments team, and the Card Class is solely responsible for supporting the Cards team.</p>

<p>Also, when new features arrive, then we need to distinct in which Class to include it. Moreover, this is related to the Cohesion concept, which help us to group similar functions inside a Class, and that have the same purpose served by that Class.</p>

<p>In conclusion, once you identify classes that have too many responsibilities, use this refactoring technique to create smaller classes with single responsibilities and focused only on one business actor.</p>

<p>Use this principle as a tool when translating <a href="https://codersite.dev/uml-diagrams-for-java-developers/" target="_blank">business software requirements into technical specifications</a>. Programmers must understand these design decisions before programming.</p>

<p>Now that you’ve learned the Single Responsibility principle, it’s time to learn the <a href="/open-closed-principle/" target="_blank">Open-closed principle</a> to avoid future software maintenance costs.</p>]]></content><author><name>Moises Gamio</name></author><category term="solid" /><summary type="html"><![CDATA[SOLID principles tell us how to arrange our functions into classes. When it is well applied, our software infrastructure will be easier to understand]]></summary></entry><entry><title type="html">Graphs: Depth-First Search</title><link href="https://codersite.dev/graphs-depth-first-search/" rel="alternate" type="text/html" title="Graphs: Depth-First Search" /><published>2020-06-01T15:18:45+02:00</published><updated>2020-06-01T15:18:45+02:00</updated><id>https://codersite.dev/graphs-depth-first-search</id><content type="html" xml:base="https://codersite.dev/graphs-depth-first-search/"><![CDATA[<p>Depth-First Search (DFS), is an algorithm to search for information in Graphs.</p>

<p>A <strong>Graph</strong> is a non-linear data structure consisting of nodes (or vertices) and edges. Its shape depends on the physical or abstract problem we are trying to solve. For instance, if nodes represent cities, then the routes which connect cities may be represented by <em>no-directed</em> edges. But if nodes represent tasks to complete a project, then their edges must be <em>directed</em> to indicate which task must be completed before another.</p>

<p>Graph theory was first proposed by Leonhard Euler when solved the <a href="https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg" target="_blank">Seven Bridges of Königsber</a> problem.</p>

<h2 id="graphs-terminology">Graphs: Terminology</h2>

<p>To describe terms related to Graphs, we use the following Graph, which models <strong><em>Hyperloop</em></strong> transport to be installed in Germany, for instance.</p>

<p><img src="/assets/images/graphTerminology.jpg" alt="dfs1" class="img-responsive" /></p>

<p>A Graph shows only the relationships between the <em>vertices</em> and the <em>edges</em>. Therefore, the most important here is to understand, which edges are connected to which vertex. Moreover, we can also say that Graph models connections between objects.</p>

<p><strong>Adjacency</strong></p>

<p>When two vertices are connected by a single edge, then they are adjacent or neighbors. In the figure above, the vertices represented by the cities Berlin and Leipzig are adjacent, but the cities Berlin and Dresden are not.</p>

<p><strong>Path</strong></p>

<p>A Path is defined as a sequence of edges. The figure above shows a path from Berlin to München, that passes through cities Leipzig and Nürnberg. Therefore, the path is Berlin, Leipzig, Nürnberg, München.</p>

<p><strong>Connected Graphs</strong></p>

<p>A graph is connected if exists at least one path from every vertex to every other vertex. Therefore, the figure above is connected because connects all cities.</p>

<p><strong>Directed and Weighted Graphs</strong></p>

<p>A graph is directed when the edges have a direction. In the figure above we have an undirected graph because the hyperloop can usually go either way. From Berlin to Leipzig is the same as from Leipzig to Berlin.</p>

<p>A <a href="/tree-data-structure-binary-search-tree/" target="_blank">tree</a> is an undirected graph, as long as any two vertices are connected by exactly one path.</p>

<p>Graphs are called a weighted graph when edges are given weight. For instance, the distance between cities can be weighted in how fast they are connected. The edges may contain value/cost as well.</p>

<p><strong>Acyclic Graphs Versus Cyclic Graphs</strong></p>

<p>In Graphs, cycles are paths through edges and vertices that start and end at the same vertex. An acyclic graph has no such cycles.</p>

<h2 id="reasons-to-use-graphs">Reasons to use Graphs</h2>

<p>One of the questions that a graph can answer is: which cities can be reached from a specified city?. Well, to respond to this question, we need to implement search algorithms. There are two different ways of searching in a graph: depth-first search (DFS) and breadth-first search (BFS).</p>

<h2 id="depth-first-search-dfs">Depth-First Search (DFS)</h2>

<p>Depth-First Search (DFS) is an algorithm for traversing or searching for in a Graph. The algorithm starts at the root node (selecting some arbitrary city as the root node) and explores as far as possible along each path. The following Graph shows the sequence of cities followed by the DFS algorithm, if we choose Berlin as the root node, for instance.</p>

<p><img src="/assets/images/dfsSequence.jpg" alt="dfsSequence" class="img-responsive" /></p>

<h3 id="implementing-graphs-algorithm">Implementing Graphs Algorithm</h3>

<p>We need an Object which supports any kind of data included in the Node (which includes the information, that we want to represent). We called it Vertex (because comes from a Mathematical concept). Moreover, to avoid searching in cycles, a boolean variable is included, so we will mark each node when we visit it.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">Vertex</span> <span class="p">{</span>
  <span class="kp">private</span> <span class="no">String</span> <span class="nb">name</span><span class="p">;</span>
  <span class="kp">private</span> <span class="n">boolean</span> <span class="n">visited</span><span class="p">;</span>

  <span class="kp">public</span> <span class="no">Vertex</span><span class="p">(</span><span class="no">String</span> <span class="nb">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">name</span> <span class="o">=</span> <span class="nb">name</span><span class="p">;</span>
    <span class="n">this</span><span class="p">.</span><span class="nf">visited</span> <span class="o">=</span> <span class="kp">false</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>To define, that two vertices are connected (through edges), we have two approaches: the adjacency matrix and the adjacency list.</p>

<p><strong>The Adjacency Matrix</strong></p>

<p>In a graph of N vertices, we create a two-dimensional array of NxN. An edge between two vertices (cities) indicates a connection (two adjacent nodes) and is represented by 1. No connections are represented by 0.</p>

<p><img src="/assets/images/dfsMatrix.jpg" alt="dfsMatrix" class="img-responsive" /></p>

<p>The table above says, Leipzig is adjacent to Berlin, Dresden, and Nürnberg, for instance.</p>

<p><strong>Create and Initialize an Abstract Data Type</strong></p>

<p>We create an Abstract Data Type called a Graph to define the behavior of our new data structure.</p>

<p>We need a stack data structure so we can remember the visited vertices. A stack follows the last-in, first-out (LIFO) principle, i.e., the city inserted at last is the first city to come out of the stack.</p>

<p>We define an <em>arrayOfVertex[]</em> array to store new Vertices(cities) added to the Graph.</p>

<p>We define a <em>numOfVertices</em> variable that indicates the number of Vertices already added to the Graph.</p>

<p>Since we will pass a String argument (city name) to our DFS algorithm, a <em>mapOfVertex</em> hashMap is defined to register the key-value: <em>city-index</em>, where the <em>index</em> is the City’s location at <em>arrayOfVertex[]</em>.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="k">class</span> <span class="nc">Graph</span> <span class="p">{</span>

  <span class="kp">private</span> <span class="n">final</span> <span class="n">int</span> <span class="no">MAX_VERTEX</span> <span class="o">=</span> <span class="mi">15</span><span class="p">;</span>
  <span class="kp">private</span> <span class="no">Vertex</span> <span class="n">arrayOfVertex</span><span class="p">[];</span> <span class="sr">//</span><span class="n">cities</span>
  <span class="kp">private</span> <span class="no">Map</span> <span class="n">mapOfVertex</span><span class="p">;</span>
  <span class="sr">//m</span><span class="n">atrix</span> <span class="n">of</span> <span class="n">adjacent</span> <span class="ss">vertex:
  </span><span class="kp">private</span> <span class="n">int</span> <span class="n">matrixOfAdjVertex</span><span class="p">[][];</span>
  <span class="sr">//</span><span class="n">register</span> <span class="n">the</span> <span class="n">location</span> <span class="n">at</span> <span class="n">the</span> <span class="ss">arrayOfVertex:
  </span><span class="kp">private</span> <span class="n">int</span> <span class="n">numOfVertices</span><span class="p">;</span>
  <span class="kp">private</span> <span class="no">Stack</span> <span class="n">stack</span><span class="p">;</span>

  <span class="kp">public</span> <span class="no">Graph</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">arrayOfVertex</span> <span class="o">=</span> <span class="n">new</span> <span class="no">Vertex</span><span class="p">[</span><span class="no">MAX_VERTEX</span><span class="p">];</span>
    <span class="n">mapOfVertex</span> <span class="o">=</span> <span class="n">new</span> <span class="no">ConcurrentHashMap</span><span class="o">&lt;&gt;</span><span class="p">();</span>
    <span class="n">numOfVertex</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">matrixOfAdjVertex</span> <span class="o">=</span> <span class="n">new</span> <span class="n">int</span><span class="p">[</span><span class="no">MAX_VERTEX</span><span class="p">][</span><span class="no">MAX_VERTEX</span><span class="p">];</span>
    <span class="n">stack</span> <span class="o">=</span> <span class="n">new</span> <span class="no">Stack</span><span class="o">&lt;&gt;</span><span class="p">();</span>
    <span class="sr">//ini</span><span class="n">tialize</span> <span class="n">matrix</span>
    <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">MAX_VERTEX</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="no">MAX_VERTEX</span><span class="p">;</span> <span class="n">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">matrixOfAdjVertex</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Adding a Vertex</strong></p>

<p>Before the implementation, we create a Test case with the following assumption:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@Test</span>
<span class="kp">public</span> <span class="n">void</span> <span class="n">test_addVertex</span><span class="p">()</span> <span class="p">{</span>
  <span class="no">Vertex</span> <span class="n">city</span> <span class="o">=</span> <span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="s2">"Berlin"</span><span class="p">);</span>
  <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">city</span><span class="p">);</span>
  <span class="n">assertTrue</span><span class="p">(</span><span class="n">graph</span><span class="p">.</span><span class="nf">getMapOfVertex</span><span class="p">().</span><span class="nf">size</span><span class="p">()</span> <span class="o">==</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>The implementation code register the new city in our <em>mapOfVertex</em> hashMap.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">void</span> <span class="n">addVertex</span><span class="p">(</span><span class="no">Vertex</span> <span class="n">city</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">mapOfVertex</span><span class="p">.</span><span class="nf">put</span><span class="p">(</span><span class="n">city</span><span class="p">.</span><span class="nf">getName</span><span class="p">(),</span> <span class="n">numOfVertices</span><span class="p">);</span>
  <span class="n">arrayOfVertex</span><span class="p">[</span><span class="n">numOfVertices</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span><span class="n">city</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>The <em>numOfVertices</em> variable determines the location (index) of the new City in the <em>arrayOfVertex[]</em>.</p>

<p><strong>Adding an edge</strong></p>

<p>We add two entries to <em>matrixOfAdjVertex</em>, because two cities are connected in both directions.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">void</span> <span class="n">addEdge</span><span class="p">(</span><span class="no">String</span> <span class="n">city1</span><span class="p">,</span> <span class="no">String</span> <span class="n">city2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">int</span> <span class="n">start</span> <span class="o">=</span> <span class="n">mapOfVertex</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">city1</span><span class="p">);</span>
    <span class="n">int</span> <span class="k">end</span> <span class="o">=</span> <span class="n">mapOfVertex</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">city2</span><span class="p">);</span>
    <span class="n">matrixOfAdjVertex</span><span class="p">[</span><span class="n">start</span><span class="p">][</span><span class="k">end</span><span class="p">]</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">matrixOfAdjVertex</span><span class="p">[</span><span class="k">end</span><span class="p">][</span><span class="n">start</span><span class="p">]</span> <span class="o">=</span><span class="mi">1</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>You can implement your code for these methods. The point here is that we need to define the topology of our Graph, adding Vertices(cities) and edges that connect them.</p>

<h3 id="depth-first-search-the-algorithm">Depth-First Search: The algorithm</h3>

<p>We define a <em>dfs()</em> method, which receives the City name as its argument. Then we locate the index of this city in our hashMap, is marked as visited, and push it onto the stack.</p>

<p>We iterate the stack <em>until is empty</em>. And this is what we do in every iteration:</p>

<ol>
  <li>We retrieve the Vertex from the top of the stack (peek)</li>
  <li>We try to retrieve at least one unvisited neighbor for this vertex</li>
  <li>If one vertex is found, it is marked as visited and pushes it onto the stack</li>
  <li>If one vertex is not found, we pop the stack</li>
</ol>

<p>If Berlin were our entry city, then the first adjacent city will be Leipzig, which is marked as visited and push it into the stack. In the next iteration, we read Leipzig (through <em>peek</em> method) from the stack and look for its neighbors. Therefore, following these iterations, we arrive at München. That is the <em>in-depth</em> essence of this algorithm: to explore as far as possible along each branch before continuing with a new one.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">public</span> <span class="n">void</span> <span class="n">dfs</span><span class="p">(</span><span class="no">String</span> <span class="n">city</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">int</span> <span class="n">vertex</span> <span class="o">=</span> <span class="n">mapOfVertex</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">city</span><span class="p">);</span>
    <span class="n">arrayOfVertex</span><span class="p">[</span><span class="n">vertex</span><span class="p">].</span><span class="nf">setVisited</span><span class="p">(</span><span class="kp">true</span><span class="p">);</span>
    <span class="no">System</span><span class="p">.</span><span class="nf">out</span><span class="p">.</span><span class="nf">print</span><span class="p">(</span><span class="n">city</span> <span class="o">+</span> <span class="s2">" "</span><span class="p">);</span>
    <span class="n">stack</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="n">vertex</span><span class="p">);</span>

    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="n">stack</span><span class="p">.</span><span class="nf">isEmpty</span><span class="p">())</span> <span class="p">{</span>
      <span class="n">int</span> <span class="n">adjVertex</span> <span class="o">=</span> <span class="n">getAdjVertex</span><span class="p">(</span><span class="n">stack</span><span class="p">.</span><span class="nf">peek</span><span class="p">());</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">adjVertex</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">arrayOfVertex</span><span class="p">[</span><span class="n">adjVertex</span><span class="p">].</span><span class="nf">setVisited</span><span class="p">(</span><span class="kp">true</span><span class="p">);</span>
        <span class="no">System</span><span class="p">.</span><span class="nf">out</span><span class="p">.</span><span class="nf">print</span><span class="p">(</span>
            <span class="n">arrayOfVertex</span><span class="p">[</span><span class="n">adjVertex</span><span class="p">].</span><span class="nf">getName</span><span class="p">()</span> <span class="o">+</span> <span class="s2">" "</span><span class="p">);</span>
        <span class="n">stack</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="n">adjVertex</span><span class="p">);</span>
      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="n">stack</span><span class="p">.</span><span class="nf">pop</span><span class="p">();</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span></code></pre></figure>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="kp">private</span> <span class="n">int</span> <span class="n">getAdjVertex</span><span class="p">(</span><span class="n">int</span> <span class="n">vertex</span><span class="p">)</span> <span class="p">{</span>
<span class="k">for</span> <span class="p">(</span><span class="n">int</span> <span class="n">adj</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">adj</span><span class="o">&lt;</span><span class="n">numOfVertices</span><span class="p">;</span> <span class="n">adj</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
   <span class="k">if</span> <span class="p">(</span><span class="n">matrixOfAdjVertex</span><span class="p">[</span><span class="n">vertex</span><span class="p">][</span><span class="n">adj</span><span class="p">]</span> <span class="o">==</span><span class="mi">1</span> <span class="o">&amp;&amp;</span>
       <span class="n">arrayOfVertex</span><span class="p">[</span><span class="n">adj</span><span class="p">].</span><span class="nf">isVisited</span><span class="p">()</span> <span class="o">==</span><span class="kp">false</span><span class="p">)</span>
       <span class="k">return</span> <span class="n">adj</span><span class="p">;</span> <span class="sr">//</span><span class="k">return</span> <span class="n">first</span> <span class="n">adjacent</span> <span class="n">vertex</span>
   <span class="p">}</span>
   <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="sr">//no</span><span class="n">t</span> <span class="n">vertices</span> <span class="n">found</span>
<span class="p">}</span></code></pre></figure>

<p><strong>Test case</strong></p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@Test</span>
  <span class="kp">public</span> <span class="n">void</span> <span class="n">test_dfs</span><span class="p">()</span> <span class="p">{</span>
    <span class="no">String</span> <span class="n">city1</span> <span class="o">=</span><span class="s2">"Berlin"</span><span class="p">;</span> <span class="no">String</span> <span class="n">city2</span> <span class="o">=</span><span class="s2">"Leipzig"</span><span class="p">;</span>
    <span class="no">String</span> <span class="n">city3</span> <span class="o">=</span><span class="s2">"Dresden"</span><span class="p">;</span> <span class="no">String</span> <span class="n">city4</span> <span class="o">=</span><span class="s2">"Nürnberg"</span><span class="p">;</span>
    <span class="no">String</span> <span class="n">city5</span> <span class="o">=</span><span class="s2">"Hannover"</span><span class="p">;</span> <span class="no">String</span> <span class="n">city6</span> <span class="o">=</span><span class="s2">"Rostock"</span><span class="p">;</span>
    <span class="no">String</span> <span class="n">city7</span> <span class="o">=</span><span class="s2">"Dortmund"</span><span class="p">;</span> <span class="no">String</span> <span class="n">city8</span> <span class="o">=</span><span class="s2">"Frankfurt"</span><span class="p">;</span>
    <span class="no">String</span> <span class="n">city9</span> <span class="o">=</span><span class="s2">"Stuttgart"</span><span class="p">;</span> <span class="no">String</span> <span class="n">city10</span> <span class="o">=</span><span class="s2">"München"</span><span class="p">;</span>
    <span class="no">String</span> <span class="n">city11</span> <span class="o">=</span><span class="s2">"Magdeburg"</span><span class="p">;</span> <span class="no">String</span> <span class="n">city12</span> <span class="o">=</span><span class="s2">"Bremen"</span><span class="p">;</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city1</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city2</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city3</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city4</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city5</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city6</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city7</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city8</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city9</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city10</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city11</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addVertex</span><span class="p">(</span><span class="n">new</span> <span class="no">Vertex</span><span class="p">(</span><span class="n">city12</span><span class="p">));</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city1</span><span class="p">,</span> <span class="n">city2</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city2</span><span class="p">,</span> <span class="n">city3</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city3</span><span class="p">,</span> <span class="n">city4</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city4</span><span class="p">,</span> <span class="n">city10</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city11</span><span class="p">,</span> <span class="n">city5</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city5</span><span class="p">,</span> <span class="n">city7</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city7</span><span class="p">,</span> <span class="n">city8</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city8</span><span class="p">,</span> <span class="n">city9</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city1</span><span class="p">,</span> <span class="n">city6</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city1</span><span class="p">,</span> <span class="n">city11</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">addEdge</span><span class="p">(</span><span class="n">city5</span><span class="p">,</span> <span class="n">city12</span><span class="p">);</span>
    <span class="n">graph</span><span class="p">.</span><span class="nf">dfs</span><span class="p">(</span><span class="n">city1</span><span class="p">);</span>
  <span class="p">}</span></code></pre></figure>

<p>Here, the output:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Berlin Leipzig Dresden Nürnberg München Rostock Magdeburg Hannover Dortmund Frankfurt Stuttgart Bremen
</code></pre></div></div>

<p>We can change the entry city and see different traversing paths</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hannover Dortmund Frankfurt Stuttgart Magdeburg Berlin Leipzig Dresden Nürnberg München Rostock Bremen 
</code></pre></div></div>

<p>You can see as well the <em>Breadth-First Search</em> (BFS) algorithm by using an Adjacency List based on a LinkedList data structure in the following <a href="https://amzn.to/35bIlAY" target="_blank">link</a></p>]]></content><author><name>Moises Gamio</name></author><category term="algorithms" /><summary type="html"><![CDATA[Wants to know what is the shortest path in a graphs data structure. So the Depth-First Search (DFS) algorithm is what you need to learn]]></summary></entry></feed>